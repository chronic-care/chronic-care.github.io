@prefix fhir: <http://hl7.org/fhir/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# - resource -------------------------------------------------------------------

<http://fhir.org/guides/preventive-care/Library/CDSConnectCommons> a fhir:Library;
  fhir:nodeRole fhir:treeRoot;
  fhir:Resource.id [ fhir:value "CDSConnectCommons"];
  fhir:Resource.meta [
     fhir:Meta.profile [
       fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-shareablelibrary";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-shareablelibrary>
     ], [
       fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-computablelibrary";
       fhir:index 1;
       fhir:link <http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-computablelibrary>
     ], [
       fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-publishablelibrary";
       fhir:index 2;
       fhir:link <http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-publishablelibrary>
     ], [
       fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-executablelibrary";
       fhir:index 3;
       fhir:link <http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-executablelibrary>
     ]
  ];
  fhir:DomainResource.text [
     fhir:Narrative.status [ fhir:value "generated" ];
     fhir:Narrative.div "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>depends-on</td><td><code>http://hl7.org/fhir/Library/FHIR-ModelInfo|4.0.1</code></td></tr><tr><td>depends-on</td><td><code>http://hl7.org/fhir/Library/FHIRHelpers|4.0.1</code></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/2.1.0/CodeSystem-allergyintolerance-verification.html\">AllergyIntolerance Verification Status</a></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/2.1.0/CodeSystem-allergyintolerance-clinical.html\">AllergyIntolerance Clinical Status Codes</a></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/2.1.0/CodeSystem-condition-ver-status.html\">ConditionVerificationStatus</a></td></tr><tr><td>depends-on</td><td><a href=\"http://terminology.hl7.org/2.1.0/CodeSystem-condition-clinical.html\">Condition Clinical Status Codes</a></td></tr></table><h2>Data Requirements</h2><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/observation.html\">Observation</a> (<a href=\"http://hl7.org/fhir/R4/observation.html\">Observation</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/condition.html\">Condition</a> (<a href=\"http://hl7.org/fhir/R4/condition.html\">Condition</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/procedure.html\">Procedure</a> (<a href=\"http://hl7.org/fhir/R4/procedure.html\">Procedure</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/encounter.html\">Encounter</a> (<a href=\"http://hl7.org/fhir/R4/encounter.html\">Encounter</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/allergyintolerance.html\">AllergyIntolerance</a> (<a href=\"http://hl7.org/fhir/R4/allergyintolerance.html\">AllergyIntolerance</a>)</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code>// CDS Connect Commons for FHIRv400\n\nlibrary CDSConnectCommons version '1.0.0'\n\nusing FHIR version '4.0.1'\n\n// Include the FHIRHelpers library for simplifying interacton w/ the FHIR data model\ninclude FHIRHelpers version '4.0.1'\n\ncodesystem \"AIVERSTATUS\": 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification'\ncodesystem \"AICLINSTATUS\": 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'\ncodesystem \"CONDVERSTATUS\": 'http://terminology.hl7.org/CodeSystem/condition-ver-status'\ncodesystem \"CONDCLINSTATUS\": 'http://terminology.hl7.org/CodeSystem/condition-clinical'\ncode \"AllergyIntolerance Confirmed code\": 'confirmed' from \"AIVERSTATUS\" display 'Confirmed'\ncode \"AllergyIntolerance Active code\": 'active' from \"AICLINSTATUS\" display 'Active'\ncode \"Condition Confirmed code\": 'confirmed' from \"CONDVERSTATUS\" display 'Confirmed'\ncode \"Condition Active code\": 'active' from \"CONDCLINSTATUS\" display 'Active'\ncode \"Condition Recurrence code\": 'recurrence' from \"CONDCLINSTATUS\" display 'Recurrence'\ncode \"Condition Relapse code\": 'relapse' from \"CONDCLINSTATUS\" display 'Relapse'\n\n// -------------------------------------------------- GENERAL ---------------------------------------------------------\n\n/**\n * Converts a FHIR Period to a CQL Interval.  FHIRHelpers provides a function for this, but\n * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL\n * Execution Framework apparently does not handle this correctly.  Creating uniquely named\n * functions here ensures safe execution.\n * @param period - a FHIR Period\n * @returns {System.Interval} a CQL Interval or null if null was passed in\n */\ndefine function PeriodToInterval(period FHIR.Period):\n  if period is null then\n    null\n  else\n    if period.\"start\" is null then\n      Interval(period.\"start\".value, period.\"end\".value]\n    else\n      Interval[period.\"start\".value, period.\"end\".value]\n\n/**\n * Converts a FHIR Quantity to a CQL Interval.  FHIRHelpers provides a function for this, but\n * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL\n * Execution Framework apparently does not handle this correctly.  Creating uniquely named\n * functions here ensures safe execution.\n * @param quantity - a FHIR Quantity\n * @returns {System.Interval} a CQL Interval or null if null was passed in\n */\n/*\ndefine function QuantityToInterval(quantity FHIR.Quantity):\n  if quantity is null then null else\n    case quantity.comparator.value\n      when '&lt;' then\n        Interval[\n          null,\n          FHIRHelpers.ToQuantityIgnoringComparator(quantity)\n        )\n      when '&lt;=' then\n        Interval[\n          null,\n          FHIRHelpers.ToQuantityIgnoringComparator(quantity)\n        ]\n      when '&gt;=' then\n        Interval[\n          FHIRHelpers.ToQuantityIgnoringComparator(quantity),\n          null\n        ]\n      when '&gt;' then\n        Interval(\n          FHIRHelpers.ToQuantityIgnoringComparator(quantity),\n          null\n        ]\n      else\n        Interval[FHIRHelpers.ToQuantity(quantity), FHIRHelpers.ToQuantity(quantity)]\n    end\n*/\n\n/**\n * Converts a FHIR Range to a CQL Interval.  FHIRHelpers provides a function for this, but\n * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL\n * Execution Framework apparently does not handle this correctly.  Creating uniquely named\n * functions here ensures safe execution.\n * @param range - a FHIR Range\n * @returns {System.Interval} a CQL Interval or null if null was passed in\n */\ndefine function RangeToInterval(range FHIR.Range):\n  if range is null then\n    null\n  else\n    Interval[FHIRHelpers.ToQuantity(range.low), FHIRHelpers.ToQuantity(range.high)]\n\n// -------------------------------------------------- OBSERVATIONS -----------------------------------------------------\n\n/**\n * Filters Observations by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,\n * but for backwards compatibility, we keep this query where clause as an option.\n * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)\n * @returns {List&lt;Observation&gt;} a list of Observations matching the concept, or null if null was passed in\n */\ndefine function ObservationsByConcept(Koncept System.Concept):\n  [Observation] O where FHIRHelpers.ToConcept(O.code) ~ Koncept\n\n/**\n * Observations that are complete and verified. In FHIR R4, there are three statuses that indicate this state: 'final',\n * 'corrected', and 'amended'.\n * @see http://hl7.org/fhir/R4/valueset-observation-status.html\n * @param ObsList - a list of Observations\n * @returns {List&lt;Observation&gt;} a list of verified Observations, or null if null was passed in\n */\ndefine function Verified(ObsList List&lt;Observation&gt;):\n  ObsList O where O.status.value in {'final', 'corrected', 'amended'}\n\n/**\n * Observations that have quantity values recorded in the requested unit.\n * @param ObsList - a list of Observations\n * @param Unit - the unit to require in the Observations quantity value\n * @returns {List&lt;Observation&gt;} a list of Observations with the required unit, or null if null was passed in\n */\ndefine function WithUnit(ObsList List&lt;Observation&gt;, Unit String):\n  ObsList O\n    where (O.value as FHIR.Quantity).unit.value = Unit or (O.value as FHIR.Quantity).code.value = Unit\n\n/**\n * Observations with an effective or issued date in the specified \"look back\" period.  For example, LDL-C Tests in the\n * last 6 years.\n * TODO: Rename to LookBack once the execution engine supports overloaded functions.\n * @param ObsList - a list of Observations\n * @returns {List&lt;Observation&gt;} a list of Observations with effective or issued date specified lookback period, or null\n * if null was passed in\n */\ndefine function ObservationLookBack(ObsList List&lt;Observation&gt;, LookBack System.Quantity):\n  ObsList O\n    let LookBackInterval: Interval[Now() - LookBack, Now()]\n    where (O.effective as FHIR.dateTime).value in LookBackInterval\n      or (O.effective as FHIR.instant).value in LookBackInterval\n      or PeriodToInterval(O.effective as FHIR.Period) overlaps LookBackInterval\n      or O.issued.value in LookBackInterval\n\n/**\n * The most recent observation.  For each Observation, this algorithm will use the Coalesce function, which uses the\n * first non-null date value from these fields: effectiveDateTime, effectiveInstant, effectivePeriod.end,\n * effectivePeriod.start, issued. The found date will be used to compare Observations and determine the most recent\n * one.  NOTE: We can't use FindDate because it appears that the execution engine may have problems sorting by the\n * result of a function.\n * @param ObsList - a list of Observations\n * @returns {Observation} the most recent Observation from the list, or null if null was passed in\n */\ndefine function MostRecent(ObsList List&lt;Observation&gt;):\n  Last(ObsList O sort by Coalesce(\n    (effective as FHIR.dateTime).value,\n    (effective as FHIR.instant).value,\n    (effective as FHIR.Period).\"end\".value,\n    (effective as FHIR.Period).\"start\".value,\n    issued.value)\n  )\n\n/**\n * Extracts the quantity value from an Observation, returning it as a CQL Quantity\n * @param Obs - an observation\n * @returns {System.Quantity} the Observation's value as a quantity, or null if there is no quantity value\n */\ndefine function QuantityValue(Obs Observation):\n  FHIRHelpers.ToQuantity(Obs.value as FHIR.Quantity)\n\n/**\n * Extracts the CodeableConcept value from an Observation, returning it as a CQL Concept\n * @param Obs - an observation\n * @returns {System.Concept} the Observation's value as a concept, or null if there is no CodeabeConcept value\n */\ndefine function ConceptValue(Obs Observation):\n  FHIRHelpers.ToConcept(Obs.value as FHIR.CodeableConcept)\n\n/**\n * Finds the first non-null meaningful date that can be associated with this Observation.  This will look through the\n * following fields in the following order: effectiveDateTime, effectiveInstant, effectivePeriod.end,\n * effectivePeriod.start, issued.\n * @param Obs - an Observation\n * @returns {System.DateTime} the first non-null meaningful date, or null if non is found\n */\ndefine function FindDate(Obs Observation):\n  Coalesce(\n    (Obs.effective as FHIR.dateTime).value,\n    (Obs.effective as FHIR.instant).value,\n    (Obs.effective as FHIR.Period).\"end\".value,\n    (Obs.effective as FHIR.Period).\"start\".value,\n    Obs.issued.value\n  )\n\n/**\n * The highest observation.\n * The value will be used to compare Observations and determine the highest one.\n * @param ObsList - a list of Observations\n * @returns {System.Quantity} the quantity with the highest value from the list, or null if null was passed in\n */\ndefine function HighestObservation(ObsList List&lt;Observation&gt;):\n  Max(ObsList O return FHIRHelpers.ToQuantity(O.value as FHIR.Quantity))\n\n/**\n * The lowest observation.\n * The value will be used to compare Observations and determine the lowest one.\n * @param ObsList - a list of Observations\n * @returns {System.Quantity} the quantity with the lowest value from the list, or null if null was passed in\n */\ndefine function LowestObservation(ObsList List&lt;Observation&gt;):\n  Min(ObsList O return FHIRHelpers.ToQuantity(O.value as FHIR.Quantity))\n\n\n// -------------------------------------------------- CONDITIONS -------------------------------------------------------\n\n/**\n * Filters Conditions by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,\n * but for backwards compatibility, we keep this query where clause as an option.\n * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)\n * @returns {List&lt;Observation&gt;} a list of Conditions matching the concept, or null if null was passed in\n */\ndefine function ConditionsByConcept(Koncept System.Concept):\n  [Condition] C where FHIRHelpers.ToConcept(C.code) ~ Koncept\n\n/**\n * Conditions that are confirmed. In FHIR R4, this is reflected by verificationStatus: 'confirmed'.\n * @see http://hl7.org/fhir/R4/valueset-condition-ver-status.html\n * @param CondList - a list of Conditions\n * @returns {List&lt;Condition&gt;} a list of confirmed Conditions, or null if null was passed in\n */\ndefine function Confirmed(CondList List&lt;Condition&gt;):\n  CondList C where C.verificationStatus ~ \"Condition Confirmed code\"\n\n/**\n * Conditions that are active. In FHIR R4, this is reflected by clinicalStatus: 'active' and the absence of any\n * abatement information (i.e., if it abated, it is no longer active).\n * TODO: Rename to Active once the execution engine supports overloaded functions.\n * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html\n * @param CondList - a list of Conditions\n * @returns {List&lt;Condition&gt;} a list of active Conditions, or null if null was passed in\n */\ndefine function ActiveCondition(CondList List&lt;Condition&gt;):\n  CondList C\n    where C.clinicalStatus ~ \"Condition Active code\"\n      and C.abatement is null\n\n/**\n * Conditions that are active or recurring. In FHIR R4, this is reflected by clinicalStatus: 'active', 'recurrence', or\n * 'relapse'.  We do not check for null abatement information because it may have dates from when the now recurring\n * condition initially went into remission.\n * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html\n * @param CondList - a list of Conditions\n * @returns {List&lt;Condition&gt;} a list of active or recurring Conditions, or null if null was passed in\n */\ndefine function ActiveOrRecurring(CondList List&lt;Condition&gt;):\n  CondList C\n    where C.clinicalStatus ~ \"Condition Active code\"\n      or C.clinicalStatus ~ \"Condition Recurrence code\"\n      or C.clinicalStatus ~ \"Condition Relapse code\"\n\n/**\n * Conditions with an onset or recorded date in the specified \"look back\" period.  For example, pregnancy in\n * the last 42 weeks.\n * TODO: Rename to LookBack once the execution engine supports overloaded functions.\n * @param CondList - a list of Conditions\n * @returns {List&lt;Condition&gt;} a list of Conditions with onset or recorded date specified lookback period, or null\n * if null was passed in\n */\ndefine function ConditionLookBack(CondList List&lt;Condition&gt;, LookBack System.Quantity):\n  CondList C\n    let LookBackInterval: Interval[Now() - LookBack, Now()]\n    where (C.onset as FHIR.dateTime).value in LookBackInterval\n      or PeriodToInterval(C.onset as FHIR.Period) overlaps LookBackInterval\n      or C.recordedDate.value in LookBackInterval\n\n/**\n * The most recent condition.  For each Condition, this algorithm will use the Coalesce function, which uses the\n * first non-null result from these fields: onsetDateTime, onsetPeriod.end, onsetPeriod.start, assertedDate.\n * The found date will be used to compare Conditions and determine the most recent one.\n * @param CondList - a list of Conditions\n * @returns {Condition} the most recent Condition from the list, or null if null was passed in\n */\ndefine function MostRecentCondition(CondList List&lt;Condition&gt;):\n  Last(CondList C sort by Coalesce(\n    (onset as FHIR.dateTime).value,\n    (onset as FHIR.Period).\"end\".value,\n    (onset as FHIR.Period).\"start\".value,\n    recordedDate.value)\n  )\n\n // -------------------------------------------------- PROCEDURES ------------------------------------------------------\n\n /**\n  * Filters Procedures by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,\n * but for backwards compatibility, we keep this query where clause as an option.\n  * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)\n  * @returns {List&lt;Procedure&gt;} a list of Procedures matching the concept, or null if null was passed in\n  */\n define function ProceduresByConcept(Koncept System.Concept):\n   [Procedure] P where FHIRHelpers.ToConcept(P.code) ~ Koncept\n\n/**\n * Procedures that are completed. In FHIR R4, this is reflected by status: 'completed'.\n * @see http://hl7.org/fhir/R4/valueset-event-status.html\n * @param ProcList - a list of Procedures\n * @returns {List&lt;Procedure&gt;} a list of completed Procedures, or null if null was passed in\n */\ndefine function Completed(ProcList List&lt;Procedure&gt;):\n  ProcList P\n    where P.status.value = 'completed'\n\n/**\n * Procedures that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.\n * @see http://hl7.org/fhir/R4/valueset-event-status.html\n * @param ProcList - a list of Procedures\n * @returns {List&lt;Procedure&gt;} a list of completed Procedures, or null if null was passed in\n */\ndefine function ProcedureInProgress(ProcList List&lt;Procedure&gt;):\n  ProcList P\n    where P.status.value = 'in-progress'\n\n/**\n * Procedures that actually happened or are happening. In FHIR R4, there are a few properties that negate the\n * procedure, most notably when status is 'preparation', 'not-done', 'entered-in-error', or 'unknown'.\n * @see http://hl7.org/fhir/R4/valueset-event-status.html\n * @param ProcList - a list of Procedures\n * @returns {List&lt;Procedure&gt;} a list of Procedures that actually happened or are happening, or null if null was passed in\n */\ndefine function ProcedurePerformance(ProcList List&lt;Procedure&gt;):\n  ProcList P\n    where not (P.status.value in {'preparation', 'not-done', 'entered-in-error', 'unknown'})\n\n/**\n * Procedures performed in the specified \"look back\" period.  For example, PCIs performed in the\n * past 2 weeks.\n * TODO: Rename to LookBack once the execution engine supports overloaded functions.\n * @param ProcList - a list of Procedures\n * @param LookBack - the lookback period for when the procedure was performed\n * @returns {List&lt;Procedure&gt;} a list of Procedures performed in the look back period, or null if null\n * was passed in\n */\ndefine function ProcedureLookBack(ProcList List&lt;Procedure&gt;, LookBack System.Quantity):\n  ProcList P\n    let LookBackInterval: Interval[Now() - LookBack, Now()]\n    where (P.performed as FHIR.dateTime).value in LookBackInterval\n      or PeriodToInterval(P.performed as FHIR.Period) overlaps LookBackInterval\n\n/**\n * The most recent procedure.  For each Procedure, this algorithm will use the Coalesce function, which returns the\n * first non-null result from these fields: performedDateTime, performedPeriod.end, performedPeriod.start.\n * The found date will be used to compare Procedures and determine the most recent one.\n * @param ProcList - a list of Procedures\n * @returns {Procedure} the most recent Procedure from the list, or null if null was passed in\n */\ndefine function MostRecentProcedure(ProcList List&lt;Procedure&gt;):\n  Last(ProcList P sort by Coalesce(\n    (performed as FHIR.dateTime).value,\n    (performed as FHIR.Period).\"end\".value,\n    (performed as FHIR.Period).\"start\".value)\n  )\n\n// ----------------------------------------------- SERVICEREQUESTS -----------------------------------------------------\n\n/**\n * ServiceRequests that are active or completed. In FHIR R4, this is reflected by the corresponding\n * status values.\n * @see http://hl7.org/fhir/R4/valueset-request-status.html\n * @param ServiceRequestList - a list of ServiceRequests\n * @returns {List&lt;ServiceRequest&gt;} a list of accepted, in-progress, or completed ProcedureRequests,\n * or null if null was passed in\n */\ndefine function ServiceRequestActiveOrCompleted(ServiceRequestList List&lt;ServiceRequest&gt;):\n  ServiceRequestList S\n    where S.status.value in List{'active', 'completed'}\n\n/**\n * ServiceRequests ordered in the specified \"look back\" period.  For example, PCIs ordered in the\n * past 2 weeks.\n * TODO: Rename to LookBack once the execution engine supports overloaded functions.\n * @param ServiceRequestList - a list of ServiceRequests\n * @param LookBack - the lookback period for when the service was ordered\n * @returns {List&lt;ServiceRequest&gt;} a list of ServiceRequests ordered in the look back period, or null if null\n * was passed in\n */\ndefine function ServiceRequestLookBack(ServiceRequestList List&lt;ServiceRequest&gt;, LookBack System.Quantity):\n  ServiceRequestList S\n    where S.authoredOn.value in Interval[Now() - LookBack, Now()]\n\n// -------------------------------------------------- MEDICATIONS ------------------------------------------------------\n\n/**\n* Medication requests that are active.  In FHIR R4, this is reflected by MedicationRequest with status 'active'.\n* Note that in R4, the MedicationRequest Boundaries and Relationships now says: \"When reporting on the usage of\n* a medication by a patient, the MedicationStatement resource should be used.\" It also indicates that:\n* \"A medication statement is not a part of the prescribe-&gt;dispense-&gt;administer sequence but is a report that\n* such a sequence (or at least a part of it) did take place resulting in a belief that the patient has received\n* a particular medication.\" In this regard, MedicationStatement is more appropriate as an indication of an actually\n* active medication, although it's not clear if vendors really will automatically create MedicationStatements in\n* these cases or not.  Until we know, MedicationRequest may be the best proxy we have for an active medication.\n* TODO: Should the \"intent\" field be considered (e.g., is it still active if intent is \"proposal\" or \"plan\")?\n* TODO: Rename to Active once the execution engine supports overloaded functions.\n* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html\n* @param MedList - a list of MedicationRequests\n* @returns {List&lt;MedicationRequest&gt;} a list of active medication requests, or null if null was passed in\n*/\ndefine function ActiveMedicationRequest(MedList List&lt;MedicationRequest&gt;):\n  MedList M where M.status.value = 'active'\n\n/**\n* Medication requests that are active or completed, according to a prescription.  In FHIR R4, this is reflected by MedicationRequest\n* with status 'active' or 'completed'.  See the note above (in ActiveMedicationRequest) for more nuance regarding MedicationRequest\n* vs. MedicationStatement.\n* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html\n* @param MedList - a list of MedicationRequests\n* @returns {List&lt;MedicationRequest&gt;} a list of active medication requests, or null if null was passed in\n*/\ndefine function ActiveOrCompletedMedicationRequest(MedList List&lt;MedicationRequest&gt;):\n  MedList M\n    where M.status.value = 'active'\n      or M.status.value = 'completed'\n\n/**\n* Medication requests that are active, completed, or stopped, according to a prescription.  In FHIR R4, this is\n* reflected by MedicationRequest with status 'active', 'completed', or 'stopped'. See the note above\n* (in ActiveMedicationRequest) for more nuance regarding MedicationRequest vs. MedicationStatement.\n* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html\n* @param MedList - a list of MedicationOrders\n* @returns {List&lt;MedicationRequestr&gt;} a list of active medication requests, or null if null was passed in\n*/\ndefine function ActiveCompletedOrStoppedMedicationRequest(MedList List&lt;MedicationRequest&gt;):\n  MedList M\n    where M.status.value = 'active'\n      or M.status.value = 'completed'\n      or M.status.value = 'stopped'\n\n/**\n* Medication requests that are issued in the specified \"look back\" period.\n* TODO: Rename to LookBack once the execution engine supports overloaded functions.\n* @param MedList - a list of Medications\n* @param LookBack - the lookback period for when the medication was prescribed\n* @returns {List&lt;MedicationRequest&gt;} a list of Medications prescribed in the look back period, or null if null\n* was passed in\n*/\ndefine function MedicationRequestLookBack(MedList List&lt;MedicationRequest&gt;, LookBack System.Quantity):\n  MedList M\n    let LookBackInterval: Interval[Now() - LookBack, Now()]\n    where M.authoredOn.value in LookBackInterval\n    // DSTU2 also checked the dateEnded property of MedicationOrder, but this doesn't exist for MedicationRequest\n\n// -------------------------------------------------- ENCOUNTERS ------------------------------------------------------\n\n/**\n * Filters Encounters by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,\n * but for backwards compatibility, we keep this query where clause as an option.\n * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)\n * @returns {List&lt;Encounter&gt;} a list of Encounters matching the concept, or null if null was passed in\n */\ndefine function EncountersByConcept(Koncept System.Concept):\n  [Encounter] E where exists( (E.type) ET where FHIRHelpers.ToConcept(ET) ~ Koncept )\n\n/**\n * Encounters that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.\n * @see http://hl7.org/fhir/R4/valueset-encounter-status.html\n * @param EncList - a list of Encounters\n * @returns {List&lt;Encounter&gt;} a list of in progress encounters, or null if null was passed in\n */\ndefine function InProgress(EncList List&lt;Encounter&gt;):\n  EncList E\n    where E.status.value = 'in-progress'\n\n// -------------------------------------------------- ALLERGY INTOLERANCES ------------------------------------------------------\n\n/**\n * Filters AllergyIntolerances by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,\n * but for backwards compatibility, we keep this query where clause as an option.\n * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)\n * @returns {List&lt;AllergyIntolerance&gt;} a list of Allergy Intolerances matching the concept, or null if null was passed in\n */\ndefine function AllergyIntolerancesByConcept(Koncept System.Concept):\n  [AllergyIntolerance] A where FHIRHelpers.ToConcept(A.code) ~ Koncept\n\n/**\n* AllergyIntolerances that are active or confirmed.  In FHIR STU3, this is reflected by AllergyIntolerance\n* with clinicalStatus 'active' or verificationStatus 'confirmed'\n* @see https://www.hl7.org/fhir/R4/valueset-allergy-clinical-status.html\n* @see https://www.hl7.org/fhir/R4/valueset-allergy-verification-status.html\n* @param AllergyIntolList - a list of AllergyIntolerances\n* @returns {List&lt;AllergyIntolerance&gt;} a list of active or confirmed allergy intolerances, or null if null was passed in\n*/\ndefine function ActiveOrConfirmedAllergyIntolerance(AllergyIntolList List&lt;AllergyIntolerance&gt;):\n  AllergyIntolList A\n    where A.clinicalStatus ~ \"AllergyIntolerance Active code\"\n      or A.verificationStatus ~ \"AllergyIntolerance Confirmed code\"\n\n// -------------------------------------------------------- GOALS ------------------------------------------------------\n\n/**\n * Goals with a start, target, or status date in the specified \"look back\" period.  For example, Pain Management Goals\n * in the last 2 years.\n * TODO: Rename to LookBack once the execution engine supports overloaded functions.\n * @param GoalList - a list of Goals\n * @returns {List&lt;Goal&gt;} a list of Goals with a start, target, or status date in the specified lookback period, or null\n * if null was passed in\n */\ndefine function GoalLookBack(GoalList List&lt;Goal&gt;, LookBack System.Quantity):\n  GoalList G\n    let LookBackInterval: Interval[Now() - LookBack, Now()],\n    StartDate: (G.start as FHIR.date).value,\n    StatusDate: G.statusDate.value,\n    TargetDates: (G.target) T return (T.due as FHIR.date).value,\n    TargetQuantities: (G.target) T return FHIRHelpers.ToQuantity(T.due as FHIR.Duration)\n    where StartDate in LookBackInterval\n      or StatusDate in LookBackInterval\n      or exists(TargetDates TD where TD in LookBackInterval)\n      or exists(TargetQuantities TQ where (StartDate + TQ) in LookBackInterval)\n</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 69Kb)</p><p><code>Content not shown - (</code><code>application/elm+json</code>, size = 127Kb)</p></div>"
  ];
  fhir:DomainResource.extension [
     fhir:index 0;
     fhir:Extension.url [ fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability" ];
     fhir:Extension.valueCode [ fhir:value "shareable" ]
  ], [
     fhir:index 1;
     fhir:Extension.url [ fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability" ];
     fhir:Extension.valueCode [ fhir:value "computable" ]
  ], [
     fhir:index 2;
     fhir:Extension.url [ fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability" ];
     fhir:Extension.valueCode [ fhir:value "publishable" ]
  ], [
     fhir:index 3;
     fhir:Extension.url [ fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeCapability" ];
     fhir:Extension.valueCode [ fhir:value "executable" ]
  ], [
     fhir:index 4;
     fhir:Extension.url [ fhir:value "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-knowledgeRepresentationLevel" ];
     fhir:Extension.valueCode [ fhir:value "structured" ]
  ];
  fhir:Library.url [ fhir:value "http://fhir.org/guides/preventive-care/Library/CDSConnectCommons"];
  fhir:Library.version [ fhir:value "1.0.0"];
  fhir:Library.name [ fhir:value "CDSConnectCommons"];
  fhir:Library.title [ fhir:value "CQL Library - Common Logic for CDS"];
  fhir:Library.status [ fhir:value "active"];
  fhir:Library.experimental [ fhir:value "true"^^xsd:boolean];
  fhir:Library.type [
     fhir:CodeableConcept.coding [
       fhir:index 0;
       fhir:Coding.system [ fhir:value "http://terminology.hl7.org/CodeSystem/library-type" ];
       fhir:Coding.code [ fhir:value "logic-library" ]
     ]
  ];
  fhir:Library.date [ fhir:value "2021-03-08T22:54:39+00:00"^^xsd:dateTime];
  fhir:Library.publisher [ fhir:value "U.S. Preventive Services Task Force (USPSTF)"];
  fhir:Library.contact [
     fhir:index 0;
     fhir:ContactDetail.telecom [
       fhir:index 0;
       fhir:ContactPoint.system [ fhir:value "url" ];
       fhir:ContactPoint.value [ fhir:value "https://www.uspreventiveservicestaskforce.org/uspstf/" ]
     ]
  ];
  fhir:Library.description [ fhir:value "CQL Common Logic for CDS providing shared helper functions."];
  fhir:Library.jurisdiction [
     fhir:index 0;
     fhir:CodeableConcept.coding [
       fhir:index 0;
       fhir:Coding.system [ fhir:value "http://unstats.un.org/unsd/methods/m49/m49.htm" ];
       fhir:Coding.code [ fhir:value "001" ]
     ]
  ];
  fhir:Library.relatedArtifact [
     fhir:index 0;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://hl7.org/fhir/Library/FHIR-ModelInfo|4.0.1";
       fhir:link <http://hl7.org/fhir/Library/FHIR-ModelInfo|4.0.1>
     ]
  ], [
     fhir:index 1;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1";
       fhir:link <http://hl7.org/fhir/Library/FHIRHelpers|4.0.1>
     ]
  ], [
     fhir:index 2;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification";
       fhir:link <http://terminology.hl7.org/CodeSystem/allergyintolerance-verification>
     ]
  ], [
     fhir:index 3;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical";
       fhir:link <http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical>
     ]
  ], [
     fhir:index 4;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://terminology.hl7.org/CodeSystem/condition-ver-status";
       fhir:link <http://terminology.hl7.org/CodeSystem/condition-ver-status>
     ]
  ], [
     fhir:index 5;
     fhir:RelatedArtifact.type [ fhir:value "depends-on" ];
     fhir:RelatedArtifact.resource [
       fhir:value "http://terminology.hl7.org/CodeSystem/condition-clinical";
       fhir:link <http://terminology.hl7.org/CodeSystem/condition-clinical>
     ]
  ];
  fhir:Library.dataRequirement [
     fhir:index 0;
     fhir:DataRequirement.type [ fhir:value "Observation" ];
     fhir:DataRequirement.profile [
       fhir:value "http://hl7.org/fhir/StructureDefinition/Observation";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/StructureDefinition/Observation>
     ]
  ], [
     fhir:index 1;
     fhir:DataRequirement.type [ fhir:value "Condition" ];
     fhir:DataRequirement.profile [
       fhir:value "http://hl7.org/fhir/StructureDefinition/Condition";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/StructureDefinition/Condition>
     ]
  ], [
     fhir:index 2;
     fhir:DataRequirement.type [ fhir:value "Procedure" ];
     fhir:DataRequirement.profile [
       fhir:value "http://hl7.org/fhir/StructureDefinition/Procedure";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/StructureDefinition/Procedure>
     ]
  ], [
     fhir:index 3;
     fhir:DataRequirement.type [ fhir:value "Encounter" ];
     fhir:DataRequirement.profile [
       fhir:value "http://hl7.org/fhir/StructureDefinition/Encounter";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/StructureDefinition/Encounter>
     ]
  ], [
     fhir:index 4;
     fhir:DataRequirement.type [ fhir:value "AllergyIntolerance" ];
     fhir:DataRequirement.profile [
       fhir:value "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance";
       fhir:index 0;
       fhir:link <http://hl7.org/fhir/StructureDefinition/AllergyIntolerance>
     ]
  ];
  fhir:Library.content [
     fhir:index 0;
     fhir:Attachment.contentType [ fhir:value "text/cql" ];
     fhir:Attachment.data [ fhir:value ""^^xsd:base64Binary ]
  ], [
     fhir:index 1;
     fhir:Attachment.contentType [ fhir:value "application/elm+xml" ];
     fhir:Attachment.data [ fhir:value ""^^xsd:base64Binary ]
  ], [
     fhir:index 2;
     fhir:Attachment.contentType [ fhir:value "application/elm+json" ];
     fhir:Attachment.data [ fhir:value ""^^xsd:base64Binary ]
  ] .

# - ontology header ------------------------------------------------------------

<http://fhir.org/guides/preventive-care/Library/CDSConnectCommons.ttl> a owl:Ontology;
  owl:imports fhir:fhir.ttl .

# -------------------------------------------------------------------------------------

