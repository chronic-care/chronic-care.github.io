<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
   <annotation translatorVersion="1.3" translatorOptions="EnableAnnotations,EnableLocators,DisableListDemotion,DisableListPromotion" xsi:type="a:CqlToElmInfo"/>
   <annotation xsi:type="a:Annotation">
      <a:s r="737">
         <a:s>// CDS Connect Commons for FHIRv400library CDSConnectCommons version '1.0.0'</a:s>
      </a:s>
   </annotation>
   <identifier id="CDSConnectCommons" system="http://fhir.org/guides/preventive-care" version="1.0.0"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
      <def localId="1" locator="5:1-5:26" localIdentifier="FHIR" uri="http://hl7.org/fhir" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="1">
               <a:s>using </a:s>
               <a:s>
                  <a:s>FHIR</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
   </usings>
   <includes>
      <def localId="2" locator="8:1-8:35" localIdentifier="FHIRHelpers" path="http://hl7.org/fhir/FHIRHelpers" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="2">
               <a:s>// Include the FHIRHelpers library for simplifying interacton w/ the FHIR data modelinclude </a:s>
               <a:s>
                  <a:s>FHIRHelpers</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
   </includes>
   <codeSystems>
      <def localId="3" locator="10:1-10:97" name="AIVERSTATUS" id="http://terminology.hl7.org/CodeSystem/allergyintolerance-verification" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="3">
               <a:s>codesystem &quot;AIVERSTATUS&quot;: 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification'</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="4" locator="11:1-11:94" name="AICLINSTATUS" id="http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="4">
               <a:s>codesystem &quot;AICLINSTATUS&quot;: 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="5" locator="12:1-12:88" name="CONDVERSTATUS" id="http://terminology.hl7.org/CodeSystem/condition-ver-status" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="5">
               <a:s>codesystem &quot;CONDVERSTATUS&quot;: 'http://terminology.hl7.org/CodeSystem/condition-ver-status'</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="6" locator="13:1-13:87" name="CONDCLINSTATUS" id="http://terminology.hl7.org/CodeSystem/condition-clinical" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="6">
               <a:s>codesystem &quot;CONDCLINSTATUS&quot;: 'http://terminology.hl7.org/CodeSystem/condition-clinical'</a:s>
            </a:s>
         </annotation>
      </def>
   </codeSystems>
   <codes>
      <def localId="8" locator="14:1-14:92" name="AllergyIntolerance Confirmed code" id="confirmed" display="Confirmed" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="8">
               <a:s>code &quot;AllergyIntolerance Confirmed code&quot;: 'confirmed' from </a:s>
               <a:s r="7">
                  <a:s>&quot;AIVERSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Confirmed'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="7" locator="14:60-14:72" name="AIVERSTATUS"/>
      </def>
      <def localId="10" locator="15:1-15:84" name="AllergyIntolerance Active code" id="active" display="Active" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="10">
               <a:s>code &quot;AllergyIntolerance Active code&quot;: 'active' from </a:s>
               <a:s r="9">
                  <a:s>&quot;AICLINSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Active'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="9" locator="15:54-15:67" name="AICLINSTATUS"/>
      </def>
      <def localId="12" locator="16:1-16:85" name="Condition Confirmed code" id="confirmed" display="Confirmed" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="12">
               <a:s>code &quot;Condition Confirmed code&quot;: 'confirmed' from </a:s>
               <a:s r="11">
                  <a:s>&quot;CONDVERSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Confirmed'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="11" locator="16:51-16:65" name="CONDVERSTATUS"/>
      </def>
      <def localId="14" locator="17:1-17:77" name="Condition Active code" id="active" display="Active" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="14">
               <a:s>code &quot;Condition Active code&quot;: 'active' from </a:s>
               <a:s r="13">
                  <a:s>&quot;CONDCLINSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Active'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="13" locator="17:45-17:60" name="CONDCLINSTATUS"/>
      </def>
      <def localId="16" locator="18:1-18:89" name="Condition Recurrence code" id="recurrence" display="Recurrence" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="16">
               <a:s>code &quot;Condition Recurrence code&quot;: 'recurrence' from </a:s>
               <a:s r="15">
                  <a:s>&quot;CONDCLINSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Recurrence'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="15" locator="18:53-18:68" name="CONDCLINSTATUS"/>
      </def>
      <def localId="18" locator="19:1-19:80" name="Condition Relapse code" id="relapse" display="Relapse" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="18">
               <a:s>code &quot;Condition Relapse code&quot;: 'relapse' from </a:s>
               <a:s r="17">
                  <a:s>&quot;CONDCLINSTATUS&quot;</a:s>
               </a:s>
               <a:s> display 'Relapse'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="17" locator="19:47-19:62" name="CONDCLINSTATUS"/>
      </def>
   </codes>
   <statements>
      <def localId="42" locator="31:1-38:56" name="PeriodToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="42">
               <a:s>// -------------------------------------------------- GENERAL ---------------------------------------------------------

/**
 * Converts a FHIR Period to a CQL Interval.  FHIRHelpers provides a function for this, but
 * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL
 * Execution Framework apparently does not handle this correctly.  Creating uniquely named
 * functions here ensures safe execution.
 * @param period - a FHIR Period
 * @returns {System.Interval} a CQL Interval or null if null was passed in
 */define function PeriodToInterval(period </a:s>
               <a:s r="19">
                  <a:s>FHIR.Period</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="41">
                  <a:s r="41">
                     <a:s>if </a:s>
                     <a:s r="21">
                        <a:s r="20">
                           <a:s>period</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="22"> then
    null
  else
    </a:s>
                     <a:s r="40">
                        <a:s>if </a:s>
                        <a:s r="25">
                           <a:s r="24">
                              <a:s r="23">
                                 <a:s>period</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="24">
                                 <a:s>&quot;start&quot;</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s> then
      </a:s>
                        <a:s r="32">
                           <a:s>Interval(</a:s>
                           <a:s r="28">
                              <a:s r="27">
                                 <a:s r="26">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="27">
                                    <a:s>&quot;start&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="28">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="31">
                              <a:s r="30">
                                 <a:s r="29">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="30">
                                    <a:s>&quot;end&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="31">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>]</a:s>
                        </a:s>
                        <a:s>
    else
      </a:s>
                        <a:s r="39">
                           <a:s>Interval[</a:s>
                           <a:s r="35">
                              <a:s r="34">
                                 <a:s r="33">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="34">
                                    <a:s>&quot;start&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="35">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>, </a:s>
                           <a:s r="38">
                              <a:s r="37">
                                 <a:s r="36">
                                    <a:s>period</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="37">
                                    <a:s>&quot;end&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="38">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s>]</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="41" locator="32:3-38:56" xsi:type="If">
            <condition localId="21" locator="32:6-32:19" xsi:type="IsNull">
               <operand localId="20" locator="32:6-32:11" name="period" xsi:type="OperandRef"/>
            </condition>
            <then xsi:type="As">
               <operand localId="22" locator="33:5-33:8" xsi:type="Null"/>
               <asTypeSpecifier xsi:type="IntervalTypeSpecifier">
                  <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </then>
            <else localId="40" locator="35:5-38:56" xsi:type="If">
               <condition localId="25" locator="35:8-35:29" xsi:type="IsNull">
                  <operand localId="24" locator="35:8-35:21" path="start" xsi:type="Property">
                     <source localId="23" locator="35:8-35:13" name="period" xsi:type="OperandRef"/>
                  </operand>
               </condition>
               <then localId="32" locator="36:7-36:56" lowClosed="false" highClosed="true" xsi:type="Interval">
                  <low localId="28" locator="36:16-36:35" path="value" xsi:type="Property">
                     <source localId="27" locator="36:16-36:29" path="start" xsi:type="Property">
                        <source localId="26" locator="36:16-36:21" name="period" xsi:type="OperandRef"/>
                     </source>
                  </low>
                  <high localId="31" locator="36:38-36:55" path="value" xsi:type="Property">
                     <source localId="30" locator="36:38-36:49" path="end" xsi:type="Property">
                        <source localId="29" locator="36:38-36:43" name="period" xsi:type="OperandRef"/>
                     </source>
                  </high>
               </then>
               <else localId="39" locator="38:7-38:56" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="35" locator="38:16-38:35" path="value" xsi:type="Property">
                     <source localId="34" locator="38:16-38:29" path="start" xsi:type="Property">
                        <source localId="33" locator="38:16-38:21" name="period" xsi:type="OperandRef"/>
                     </source>
                  </low>
                  <high localId="38" locator="38:38-38:55" path="value" xsi:type="Property">
                     <source localId="37" locator="38:38-38:49" path="end" xsi:type="Property">
                        <source localId="36" locator="38:38-38:43" name="period" xsi:type="OperandRef"/>
                     </source>
                  </high>
               </else>
            </else>
         </expression>
         <operand name="period">
            <operandTypeSpecifier localId="19" locator="31:41-31:51" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="57" locator="85:1-89:83" name="RangeToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="57">
               <a:s>/**
 * Converts a FHIR Quantity to a CQL Interval.  FHIRHelpers provides a function for this, but
 * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL
 * Execution Framework apparently does not handle this correctly.  Creating uniquely named
 * functions here ensures safe execution.
 * @param quantity - a FHIR Quantity
 * @returns {System.Interval} a CQL Interval or null if null was passed in
 */
/*
define function QuantityToInterval(quantity FHIR.Quantity):
  if quantity is null then null else
    case quantity.comparator.value
      when '&lt;' then
        Interval[
          null,
          FHIRHelpers.ToQuantityIgnoringComparator(quantity)
        )
      when '&lt;=' then
        Interval[
          null,
          FHIRHelpers.ToQuantityIgnoringComparator(quantity)
        ]
      when '>=' then
        Interval[
          FHIRHelpers.ToQuantityIgnoringComparator(quantity),
          null
        ]
      when '>' then
        Interval(
          FHIRHelpers.ToQuantityIgnoringComparator(quantity),
          null
        ]
      else
        Interval[FHIRHelpers.ToQuantity(quantity), FHIRHelpers.ToQuantity(quantity)]
    end
*/

/**
 * Converts a FHIR Range to a CQL Interval.  FHIRHelpers provides a function for this, but
 * FHIRHelpers provides several overloads of the ToInterval function, and the JavaScript CQL
 * Execution Framework apparently does not handle this correctly.  Creating uniquely named
 * functions here ensures safe execution.
 * @param range - a FHIR Range
 * @returns {System.Interval} a CQL Interval or null if null was passed in
 */define function RangeToInterval(range </a:s>
               <a:s r="43">
                  <a:s>FHIR.Range</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="56">
                  <a:s r="56">
                     <a:s>if </a:s>
                     <a:s r="45">
                        <a:s r="44">
                           <a:s>range</a:s>
                        </a:s>
                        <a:s> is null</a:s>
                     </a:s>
                     <a:s r="46"> then
    null
  else
    </a:s>
                     <a:s r="55">
                        <a:s>Interval[</a:s>
                        <a:s r="50">
                           <a:s r="47">
                              <a:s>FHIRHelpers</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="50">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="49">
                                 <a:s r="48">
                                    <a:s>range</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="49">
                                    <a:s>low</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="54">
                           <a:s r="51">
                              <a:s>FHIRHelpers</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="54">
                              <a:s>ToQuantity(</a:s>
                              <a:s r="53">
                                 <a:s r="52">
                                    <a:s>range</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="53">
                                    <a:s>high</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s>]</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="56" locator="86:3-89:83" xsi:type="If">
            <condition localId="45" locator="86:6-86:18" xsi:type="IsNull">
               <operand localId="44" locator="86:6-86:10" name="range" xsi:type="OperandRef"/>
            </condition>
            <then xsi:type="As">
               <operand localId="46" locator="87:5-87:8" xsi:type="Null"/>
               <asTypeSpecifier xsi:type="IntervalTypeSpecifier">
                  <pointType name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
               </asTypeSpecifier>
            </then>
            <else localId="55" locator="89:5-89:83" lowClosed="true" highClosed="true" xsi:type="Interval">
               <low localId="50" locator="89:14-89:46" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="49" locator="89:37-89:45" path="low" xsi:type="Property">
                     <source localId="48" locator="89:37-89:41" name="range" xsi:type="OperandRef"/>
                  </operand>
               </low>
               <high localId="54" locator="89:49-89:82" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="53" locator="89:72-89:81" path="high" xsi:type="Property">
                     <source localId="52" locator="89:72-89:76" name="range" xsi:type="OperandRef"/>
                  </operand>
               </high>
            </else>
         </expression>
         <operand name="range">
            <operandTypeSpecifier localId="43" locator="85:39-85:48" name="fhir:Range" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="68" locator="99:1-100:63" name="ObservationsByConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="68">
               <a:s>// -------------------------------------------------- OBSERVATIONS -----------------------------------------------------

/**
 * Filters Observations by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List&lt;Observation>} a list of Observations matching the concept, or null if null was passed in
 */define function ObservationsByConcept(Koncept </a:s>
               <a:s r="58">
                  <a:s>System.Concept</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="67">
                  <a:s r="67">
                     <a:s>
                        <a:s r="60">
                           <a:s r="59">
                              <a:s r="59">
                                 <a:s>[Observation]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="66">
                        <a:s>where </a:s>
                        <a:s r="66">
                           <a:s r="64">
                              <a:s r="61">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="64">
                                 <a:s>ToConcept(</a:s>
                                 <a:s r="63">
                                    <a:s r="62">
                                       <a:s>O</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="63">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="65">
                              <a:s>Koncept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="67" locator="100:3-100:63" xsi:type="Query">
            <source localId="60" locator="100:3-100:17" alias="O">
               <expression localId="59" locator="100:3-100:15" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" xsi:type="Retrieve"/>
            </source>
            <where localId="66" locator="100:19-100:63" xsi:type="Equivalent">
               <operand localId="64" locator="100:25-100:53" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="63" locator="100:47-100:52" path="code" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="65" locator="100:57-100:63" name="Koncept" xsi:type="OperandRef"/>
            </where>
         </expression>
         <operand name="Koncept">
            <operandTypeSpecifier localId="58" locator="99:47-99:60" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="82" locator="109:1-110:69" name="Verified" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="82">
               <a:s>/**
 * Observations that are complete and verified. In FHIR R4, there are three statuses that indicate this state: 'final',
 * 'corrected', and 'amended'.
 * @see http://hl7.org/fhir/R4/valueset-observation-status.html
 * @param ObsList - a list of Observations
 * @returns {List&lt;Observation>} a list of verified Observations, or null if null was passed in
 */define function Verified(ObsList </a:s>
               <a:s r="70">
                  <a:s>List&lt;</a:s>
                  <a:s r="69">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="81">
                  <a:s r="81">
                     <a:s>
                        <a:s r="72">
                           <a:s r="71">
                              <a:s>
                                 <a:s>ObsList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="80">
                        <a:s>where </a:s>
                        <a:s r="80">
                           <a:s r="75">
                              <a:s r="74">
                                 <a:s r="73">
                                    <a:s>O</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="74">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="75">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="79">
                              <a:s>{</a:s>
                              <a:s r="76">
                                 <a:s>'final'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="77">
                                 <a:s>'corrected'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="78">
                                 <a:s>'amended'</a:s>
                              </a:s>
                              <a:s>}</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="81" locator="110:3-110:69" xsi:type="Query">
            <source localId="72" locator="110:3-110:11" alias="O">
               <expression localId="71" locator="110:3-110:9" name="ObsList" xsi:type="OperandRef"/>
            </source>
            <where localId="80" locator="110:13-110:69" xsi:type="In">
               <operand localId="75" locator="110:19-110:32" path="value" xsi:type="Property">
                  <source localId="74" locator="110:19-110:26" path="status" scope="O" xsi:type="Property"/>
               </operand>
               <operand localId="79" locator="110:37-110:69" xsi:type="List">
                  <element localId="76" locator="110:38-110:44" valueType="t:String" value="final" xsi:type="Literal"/>
                  <element localId="77" locator="110:47-110:57" valueType="t:String" value="corrected" xsi:type="Literal"/>
                  <element localId="78" locator="110:60-110:68" valueType="t:String" value="amended" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="70" locator="109:34-109:50" xsi:type="ListTypeSpecifier">
               <elementType localId="69" locator="109:39-109:49" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="106" locator="118:1-120:102" name="WithUnit" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="106">
               <a:s>/**
 * Observations that have quantity values recorded in the requested unit.
 * @param ObsList - a list of Observations
 * @param Unit - the unit to require in the Observations quantity value
 * @returns {List&lt;Observation>} a list of Observations with the required unit, or null if null was passed in
 */define function WithUnit(ObsList </a:s>
               <a:s r="84">
                  <a:s>List&lt;</a:s>
                  <a:s r="83">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, Unit </a:s>
               <a:s r="85">
                  <a:s>String</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="105">
                  <a:s r="105">
                     <a:s>
                        <a:s r="87">
                           <a:s r="86">
                              <a:s>
                                 <a:s>ObsList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="104">
                        <a:s>where </a:s>
                        <a:s r="104">
                           <a:s r="95">
                              <a:s r="93">
                                 <a:s r="92">
                                    <a:s r="91">
                                       <a:s>(</a:s>
                                       <a:s r="91">
                                          <a:s r="89">
                                             <a:s r="88">
                                                <a:s>O</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="89">
                                                <a:s>value</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="90">
                                             <a:s>FHIR.Quantity</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="92">
                                       <a:s>unit</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="93">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="94">
                                 <a:s>Unit</a:s>
                              </a:s>
                           </a:s>
                           <a:s> or </a:s>
                           <a:s r="103">
                              <a:s r="101">
                                 <a:s r="100">
                                    <a:s r="99">
                                       <a:s>(</a:s>
                                       <a:s r="99">
                                          <a:s r="97">
                                             <a:s r="96">
                                                <a:s>O</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="97">
                                                <a:s>value</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="98">
                                             <a:s>FHIR.Quantity</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="100">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="101">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="102">
                                 <a:s>Unit</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="105" locator="119:3-120:102" xsi:type="Query">
            <source localId="87" locator="119:3-119:11" alias="O">
               <expression localId="86" locator="119:3-119:9" name="ObsList" xsi:type="OperandRef"/>
            </source>
            <where localId="104" locator="120:5-120:102" xsi:type="Or">
               <operand localId="95" locator="120:11-120:54" xsi:type="Equal">
                  <operand localId="93" locator="120:11-120:47" path="value" xsi:type="Property">
                     <source localId="92" locator="120:11-120:41" path="unit" xsi:type="Property">
                        <source localId="91" locator="120:11-120:36" strict="false" xsi:type="As">
                           <operand localId="89" locator="120:12-120:18" path="value" scope="O" xsi:type="Property"/>
                           <asTypeSpecifier localId="90" locator="120:23-120:35" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
                        </source>
                     </source>
                  </operand>
                  <operand localId="94" locator="120:51-120:54" name="Unit" xsi:type="OperandRef"/>
               </operand>
               <operand localId="103" locator="120:59-120:102" xsi:type="Equal">
                  <operand localId="101" locator="120:59-120:95" path="value" xsi:type="Property">
                     <source localId="100" locator="120:59-120:89" path="code" xsi:type="Property">
                        <source localId="99" locator="120:59-120:84" strict="false" xsi:type="As">
                           <operand localId="97" locator="120:60-120:66" path="value" scope="O" xsi:type="Property"/>
                           <asTypeSpecifier localId="98" locator="120:71-120:83" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
                        </source>
                     </source>
                  </operand>
                  <operand localId="102" locator="120:99-120:102" name="Unit" xsi:type="OperandRef"/>
               </operand>
            </where>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="84" locator="118:34-118:50" xsi:type="ListTypeSpecifier">
               <elementType localId="83" locator="118:39-118:49" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="Unit">
            <operandTypeSpecifier localId="85" locator="118:58-118:63" name="t:String" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="148" locator="130:1-136:43" name="ObservationLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="148">
               <a:s>/**
 * Observations with an effective or issued date in the specified &quot;look back&quot; period.  For example, LDL-C Tests in the
 * last 6 years.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ObsList - a list of Observations
 * @returns {List&lt;Observation>} a list of Observations with effective or issued date specified lookback period, or null
 * if null was passed in
 */define function ObservationLookBack(ObsList </a:s>
               <a:s r="108">
                  <a:s>List&lt;</a:s>
                  <a:s r="107">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="109">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="147">
                  <a:s r="147">
                     <a:s>
                        <a:s r="111">
                           <a:s r="110">
                              <a:s>
                                 <a:s>ObsList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="117">
                           <a:s>LookBackInterval: </a:s>
                           <a:s r="116">
                              <a:s>Interval[</a:s>
                              <a:s r="114">
                                 <a:s r="112">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="113">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="115">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="146">
                        <a:s>where </a:s>
                        <a:s r="146">
                           <a:s r="140">
                              <a:s r="132">
                                 <a:s r="124">
                                    <a:s r="122">
                                       <a:s r="121">
                                          <a:s>(</a:s>
                                          <a:s r="121">
                                             <a:s r="119">
                                                <a:s r="118">
                                                   <a:s>O</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="119">
                                                   <a:s>effective</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="120">
                                                <a:s>FHIR.dateTime</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="122">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="123">
                                       <a:s>LookBackInterval</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>
      or </a:s>
                                 <a:s r="131">
                                    <a:s r="129">
                                       <a:s r="128">
                                          <a:s>(</a:s>
                                          <a:s r="128">
                                             <a:s r="126">
                                                <a:s r="125">
                                                   <a:s>O</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="126">
                                                   <a:s>effective</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="127">
                                                <a:s>FHIR.instant</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="129">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="130">
                                       <a:s>LookBackInterval</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      or </a:s>
                              <a:s r="139">
                                 <a:s r="137">
                                    <a:s>PeriodToInterval(</a:s>
                                    <a:s r="136">
                                       <a:s r="134">
                                          <a:s r="133">
                                             <a:s>O</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="134">
                                             <a:s>effective</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="135">
                                          <a:s>FHIR.Period</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s r="139"> overlaps </a:s>
                                 <a:s r="138">
                                    <a:s>LookBackInterval</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="145">
                              <a:s r="143">
                                 <a:s r="142">
                                    <a:s r="141">
                                       <a:s>O</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="142">
                                       <a:s>issued</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="143">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> in </a:s>
                              <a:s r="144">
                                 <a:s>LookBackInterval</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="147" locator="131:3-136:43" xsi:type="Query">
            <source localId="111" locator="131:3-131:11" alias="O">
               <expression localId="110" locator="131:3-131:9" name="ObsList" xsi:type="OperandRef"/>
            </source>
            <let localId="117" locator="132:9-132:59" identifier="LookBackInterval">
               <expression localId="116" locator="132:27-132:59" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="114" locator="132:36-132:51" xsi:type="Subtract">
                     <operand localId="112" locator="132:36-132:40" xsi:type="Now"/>
                     <operand localId="113" locator="132:44-132:51" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="115" locator="132:54-132:58" xsi:type="Now"/>
               </expression>
            </let>
            <where localId="146" locator="133:5-136:43" xsi:type="Or">
               <operand localId="140" locator="133:11-135:79" xsi:type="Or">
                  <operand localId="132" locator="133:11-134:64" xsi:type="Or">
                     <operand localId="124" locator="133:11-133:66" xsi:type="In">
                        <operand localId="122" locator="133:11-133:46" path="value" xsi:type="Property">
                           <source localId="121" locator="133:11-133:40" strict="false" xsi:type="As">
                              <operand localId="119" locator="133:12-133:22" path="effective" scope="O" xsi:type="Property"/>
                              <asTypeSpecifier localId="120" locator="133:27-133:39" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="123" locator="133:51-133:66" name="LookBackInterval" xsi:type="QueryLetRef"/>
                     </operand>
                     <operand localId="131" locator="134:10-134:64" xsi:type="In">
                        <operand localId="129" locator="134:10-134:44" path="value" xsi:type="Property">
                           <source localId="128" locator="134:10-134:38" strict="false" xsi:type="As">
                              <operand localId="126" locator="134:11-134:21" path="effective" scope="O" xsi:type="Property"/>
                              <asTypeSpecifier localId="127" locator="134:26-134:37" name="fhir:instant" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="130" locator="134:49-134:64" name="LookBackInterval" xsi:type="QueryLetRef"/>
                     </operand>
                  </operand>
                  <operand localId="139" locator="135:10-135:79" xsi:type="Overlaps">
                     <operand localId="137" locator="135:10-135:53" name="PeriodToInterval" xsi:type="FunctionRef">
                        <operand localId="136" locator="135:27-135:52" strict="false" xsi:type="As">
                           <operand localId="134" locator="135:27-135:37" path="effective" scope="O" xsi:type="Property"/>
                           <asTypeSpecifier localId="135" locator="135:42-135:52" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                        </operand>
                     </operand>
                     <operand localId="138" locator="135:64-135:79" name="LookBackInterval" xsi:type="QueryLetRef"/>
                  </operand>
               </operand>
               <operand localId="145" locator="136:10-136:43" xsi:type="In">
                  <operand localId="143" locator="136:10-136:23" path="value" xsi:type="Property">
                     <source localId="142" locator="136:10-136:17" path="issued" scope="O" xsi:type="Property"/>
                  </operand>
                  <operand localId="144" locator="136:28-136:43" name="LookBackInterval" xsi:type="QueryLetRef"/>
               </operand>
            </where>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="108" locator="130:45-130:61" xsi:type="ListTypeSpecifier">
               <elementType localId="107" locator="130:50-130:60" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="109" locator="130:73-130:87" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="198" locator="147:1-154:3" name="MostRecent" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="198">
               <a:s>/**
 * The most recent observation.  For each Observation, this algorithm will use the Coalesce function, which uses the
 * first non-null date value from these fields: effectiveDateTime, effectiveInstant, effectivePeriod.end,
 * effectivePeriod.start, issued. The found date will be used to compare Observations and determine the most recent
 * one.  NOTE: We can't use FindDate because it appears that the execution engine may have problems sorting by the
 * result of a function.
 * @param ObsList - a list of Observations
 * @returns {Observation} the most recent Observation from the list, or null if null was passed in
 */define function MostRecent(ObsList </a:s>
               <a:s r="150">
                  <a:s>List&lt;</a:s>
                  <a:s r="149">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="197">
                  <a:s r="197">
                     <a:s>Last(</a:s>
                     <a:s r="196">
                        <a:s>
                           <a:s r="152">
                              <a:s r="151">
                                 <a:s>
                                    <a:s>ObsList</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> O</a:s>
                           </a:s>
                        </a:s>
                        <a:s> </a:s>
                        <a:s r="195">
                           <a:s>sort by </a:s>
                           <a:s r="194">
                              <a:s r="193">
                                 <a:s>Coalesce(
    </a:s>
                                 <a:s r="176">
                                    <a:s r="175">
                                       <a:s>(</a:s>
                                       <a:s r="175">
                                          <a:s r="173">
                                             <a:s>effective</a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="174">
                                             <a:s>FHIR.dateTime</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="176">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="180">
                                    <a:s r="179">
                                       <a:s>(</a:s>
                                       <a:s r="179">
                                          <a:s r="177">
                                             <a:s>effective</a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="178">
                                             <a:s>FHIR.instant</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="180">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="185">
                                    <a:s r="184">
                                       <a:s r="183">
                                          <a:s>(</a:s>
                                          <a:s r="183">
                                             <a:s r="181">
                                                <a:s>effective</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="182">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="184">
                                          <a:s>&quot;end&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="185">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="190">
                                    <a:s r="189">
                                       <a:s r="188">
                                          <a:s>(</a:s>
                                          <a:s r="188">
                                             <a:s r="186">
                                                <a:s>effective</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="187">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="189">
                                          <a:s>&quot;start&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="190">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="192">
                                    <a:s r="191">
                                       <a:s>issued</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="192">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  )</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="197" locator="148:3-154:3" xsi:type="Last">
            <source localId="196" locator="148:8-153:17" xsi:type="Query">
               <source localId="152" locator="148:8-148:16" alias="O">
                  <expression localId="151" locator="148:8-148:14" name="ObsList" xsi:type="OperandRef"/>
               </source>
               <sort localId="195" locator="148:18-153:17">
                  <by localId="194" locator="148:26-153:17" direction="asc" xsi:type="ByExpression">
                     <expression localId="193" locator="148:26-153:17" xsi:type="Coalesce">
                        <operand localId="176" locator="149:5-149:38" path="value" xsi:type="Property">
                           <source localId="175" locator="149:5-149:32" strict="false" xsi:type="As">
                              <operand localId="173" locator="149:6-149:14" name="effective" xsi:type="IdentifierRef"/>
                              <asTypeSpecifier localId="174" locator="149:19-149:31" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="180" locator="150:5-150:37" path="value" xsi:type="Property">
                           <source localId="179" locator="150:5-150:31" strict="false" xsi:type="As">
                              <operand localId="177" locator="150:6-150:14" name="effective" xsi:type="IdentifierRef"/>
                              <asTypeSpecifier localId="178" locator="150:19-150:30" name="fhir:instant" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="185" locator="151:5-151:42" path="value" xsi:type="Property">
                           <source localId="184" locator="151:5-151:36" path="end" xsi:type="Property">
                              <source localId="183" locator="151:5-151:30" strict="false" xsi:type="As">
                                 <operand localId="181" locator="151:6-151:14" name="effective" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="182" locator="151:19-151:29" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                        <operand localId="190" locator="152:5-152:44" path="value" xsi:type="Property">
                           <source localId="189" locator="152:5-152:38" path="start" xsi:type="Property">
                              <source localId="188" locator="152:5-152:30" strict="false" xsi:type="As">
                                 <operand localId="186" locator="152:6-152:14" name="effective" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="187" locator="152:19-152:29" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                        <operand localId="192" locator="153:5-153:16" path="value" xsi:type="Property">
                           <source localId="191" locator="153:5-153:10" name="issued" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="150" locator="147:36-147:52" xsi:type="ListTypeSpecifier">
               <elementType localId="149" locator="147:41-147:51" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="206" locator="161:1-162:52" name="QuantityValue" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="206">
               <a:s>/**
 * Extracts the quantity value from an Observation, returning it as a CQL Quantity
 * @param Obs - an observation
 * @returns {System.Quantity} the Observation's value as a quantity, or null if there is no quantity value
 */define function QuantityValue(Obs </a:s>
               <a:s r="199">
                  <a:s>Observation</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="205">
                  <a:s r="205">
                     <a:s r="200">
                        <a:s>FHIRHelpers</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="205">
                        <a:s>ToQuantity(</a:s>
                        <a:s r="204">
                           <a:s r="202">
                              <a:s r="201">
                                 <a:s>Obs</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="202">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> as </a:s>
                           <a:s r="203">
                              <a:s>FHIR.Quantity</a:s>
                           </a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="205" locator="162:3-162:52" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
            <operand localId="204" locator="162:26-162:51" strict="false" xsi:type="As">
               <operand localId="202" locator="162:26-162:34" path="value" xsi:type="Property">
                  <source localId="201" locator="162:26-162:28" name="Obs" xsi:type="OperandRef"/>
               </operand>
               <asTypeSpecifier localId="203" locator="162:39-162:51" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
            </operand>
         </expression>
         <operand name="Obs">
            <operandTypeSpecifier localId="199" locator="161:35-161:45" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="214" locator="169:1-170:58" name="ConceptValue" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="214">
               <a:s>/**
 * Extracts the CodeableConcept value from an Observation, returning it as a CQL Concept
 * @param Obs - an observation
 * @returns {System.Concept} the Observation's value as a concept, or null if there is no CodeabeConcept value
 */define function ConceptValue(Obs </a:s>
               <a:s r="207">
                  <a:s>Observation</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="213">
                  <a:s r="213">
                     <a:s r="208">
                        <a:s>FHIRHelpers</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="213">
                        <a:s>ToConcept(</a:s>
                        <a:s r="212">
                           <a:s r="210">
                              <a:s r="209">
                                 <a:s>Obs</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="210">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> as </a:s>
                           <a:s r="211">
                              <a:s>FHIR.CodeableConcept</a:s>
                           </a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="213" locator="170:3-170:58" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
            <operand localId="212" locator="170:25-170:57" strict="false" xsi:type="As">
               <operand localId="210" locator="170:25-170:33" path="value" xsi:type="Property">
                  <source localId="209" locator="170:25-170:27" name="Obs" xsi:type="OperandRef"/>
               </operand>
               <asTypeSpecifier localId="211" locator="170:38-170:57" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
            </operand>
         </expression>
         <operand name="Obs">
            <operandTypeSpecifier localId="207" locator="169:34-169:44" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="242" locator="179:1-186:3" name="FindDate" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="242">
               <a:s>/**
 * Finds the first non-null meaningful date that can be associated with this Observation.  This will look through the
 * following fields in the following order: effectiveDateTime, effectiveInstant, effectivePeriod.end,
 * effectivePeriod.start, issued.
 * @param Obs - an Observation
 * @returns {System.DateTime} the first non-null meaningful date, or null if non is found
 */define function FindDate(Obs </a:s>
               <a:s r="215">
                  <a:s>Observation</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="241">
                  <a:s r="241">
                     <a:s>Coalesce(
    </a:s>
                     <a:s r="220">
                        <a:s r="219">
                           <a:s>(</a:s>
                           <a:s r="219">
                              <a:s r="217">
                                 <a:s r="216">
                                    <a:s>Obs</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="217">
                                    <a:s>effective</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> as </a:s>
                              <a:s r="218">
                                 <a:s>FHIR.dateTime</a:s>
                              </a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="220">
                           <a:s>value</a:s>
                        </a:s>
                     </a:s>
                     <a:s>,
    </a:s>
                     <a:s r="225">
                        <a:s r="224">
                           <a:s>(</a:s>
                           <a:s r="224">
                              <a:s r="222">
                                 <a:s r="221">
                                    <a:s>Obs</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="222">
                                    <a:s>effective</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> as </a:s>
                              <a:s r="223">
                                 <a:s>FHIR.instant</a:s>
                              </a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="225">
                           <a:s>value</a:s>
                        </a:s>
                     </a:s>
                     <a:s>,
    </a:s>
                     <a:s r="231">
                        <a:s r="230">
                           <a:s r="229">
                              <a:s>(</a:s>
                              <a:s r="229">
                                 <a:s r="227">
                                    <a:s r="226">
                                       <a:s>Obs</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="227">
                                       <a:s>effective</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> as </a:s>
                                 <a:s r="228">
                                    <a:s>FHIR.Period</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="230">
                              <a:s>&quot;end&quot;</a:s>
                           </a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="231">
                           <a:s>value</a:s>
                        </a:s>
                     </a:s>
                     <a:s>,
    </a:s>
                     <a:s r="237">
                        <a:s r="236">
                           <a:s r="235">
                              <a:s>(</a:s>
                              <a:s r="235">
                                 <a:s r="233">
                                    <a:s r="232">
                                       <a:s>Obs</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="233">
                                       <a:s>effective</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> as </a:s>
                                 <a:s r="234">
                                    <a:s>FHIR.Period</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="236">
                              <a:s>&quot;start&quot;</a:s>
                           </a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="237">
                           <a:s>value</a:s>
                        </a:s>
                     </a:s>
                     <a:s>,
    </a:s>
                     <a:s r="240">
                        <a:s r="239">
                           <a:s r="238">
                              <a:s>Obs</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="239">
                              <a:s>issued</a:s>
                           </a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="240">
                           <a:s>value</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  )</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="241" locator="180:3-186:3" xsi:type="Coalesce">
            <operand localId="220" locator="181:5-181:42" path="value" xsi:type="Property">
               <source localId="219" locator="181:5-181:36" strict="false" xsi:type="As">
                  <operand localId="217" locator="181:6-181:18" path="effective" xsi:type="Property">
                     <source localId="216" locator="181:6-181:8" name="Obs" xsi:type="OperandRef"/>
                  </operand>
                  <asTypeSpecifier localId="218" locator="181:23-181:35" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
               </source>
            </operand>
            <operand localId="225" locator="182:5-182:41" path="value" xsi:type="Property">
               <source localId="224" locator="182:5-182:35" strict="false" xsi:type="As">
                  <operand localId="222" locator="182:6-182:18" path="effective" xsi:type="Property">
                     <source localId="221" locator="182:6-182:8" name="Obs" xsi:type="OperandRef"/>
                  </operand>
                  <asTypeSpecifier localId="223" locator="182:23-182:34" name="fhir:instant" xsi:type="NamedTypeSpecifier"/>
               </source>
            </operand>
            <operand localId="231" locator="183:5-183:46" path="value" xsi:type="Property">
               <source localId="230" locator="183:5-183:40" path="end" xsi:type="Property">
                  <source localId="229" locator="183:5-183:34" strict="false" xsi:type="As">
                     <operand localId="227" locator="183:6-183:18" path="effective" xsi:type="Property">
                        <source localId="226" locator="183:6-183:8" name="Obs" xsi:type="OperandRef"/>
                     </operand>
                     <asTypeSpecifier localId="228" locator="183:23-183:33" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                  </source>
               </source>
            </operand>
            <operand localId="237" locator="184:5-184:48" path="value" xsi:type="Property">
               <source localId="236" locator="184:5-184:42" path="start" xsi:type="Property">
                  <source localId="235" locator="184:5-184:34" strict="false" xsi:type="As">
                     <operand localId="233" locator="184:6-184:18" path="effective" xsi:type="Property">
                        <source localId="232" locator="184:6-184:8" name="Obs" xsi:type="OperandRef"/>
                     </operand>
                     <asTypeSpecifier localId="234" locator="184:23-184:33" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                  </source>
               </source>
            </operand>
            <operand localId="240" locator="185:5-185:20" path="value" xsi:type="Property">
               <source localId="239" locator="185:5-185:14" path="issued" xsi:type="Property">
                  <source localId="238" locator="185:5-185:7" name="Obs" xsi:type="OperandRef"/>
               </source>
            </operand>
         </expression>
         <operand name="Obs">
            <operandTypeSpecifier localId="215" locator="179:30-179:40" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="256" locator="194:1-195:72" name="HighestObservation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="256">
               <a:s>/**
 * The highest observation.
 * The value will be used to compare Observations and determine the highest one.
 * @param ObsList - a list of Observations
 * @returns {System.Quantity} the quantity with the highest value from the list, or null if null was passed in
 */define function HighestObservation(ObsList </a:s>
               <a:s r="244">
                  <a:s>List&lt;</a:s>
                  <a:s r="243">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="255">
                  <a:s r="255">
                     <a:s>Max(</a:s>
                     <a:s r="254">
                        <a:s>
                           <a:s r="246">
                              <a:s r="245">
                                 <a:s>
                                    <a:s>ObsList</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> O</a:s>
                           </a:s>
                        </a:s>
                        <a:s> </a:s>
                        <a:s r="253">
                           <a:s>return </a:s>
                           <a:s r="252">
                              <a:s r="247">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="252">
                                 <a:s>ToQuantity(</a:s>
                                 <a:s r="251">
                                    <a:s r="249">
                                       <a:s r="248">
                                          <a:s>O</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="249">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> as </a:s>
                                    <a:s r="250">
                                       <a:s>FHIR.Quantity</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>)</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="255" locator="195:3-195:72" xsi:type="Max">
            <source localId="254" locator="195:7-195:71" xsi:type="Query">
               <source localId="246" locator="195:7-195:15" alias="O">
                  <expression localId="245" locator="195:7-195:13" name="ObsList" xsi:type="OperandRef"/>
               </source>
               <return localId="253" locator="195:17-195:71">
                  <expression localId="252" locator="195:24-195:71" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="251" locator="195:47-195:70" strict="false" xsi:type="As">
                        <operand localId="249" locator="195:47-195:53" path="value" scope="O" xsi:type="Property"/>
                        <asTypeSpecifier localId="250" locator="195:58-195:70" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
                     </operand>
                  </expression>
               </return>
            </source>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="244" locator="194:44-194:60" xsi:type="ListTypeSpecifier">
               <elementType localId="243" locator="194:49-194:59" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="270" locator="203:1-204:72" name="LowestObservation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="270">
               <a:s>/**
 * The lowest observation.
 * The value will be used to compare Observations and determine the lowest one.
 * @param ObsList - a list of Observations
 * @returns {System.Quantity} the quantity with the lowest value from the list, or null if null was passed in
 */define function LowestObservation(ObsList </a:s>
               <a:s r="258">
                  <a:s>List&lt;</a:s>
                  <a:s r="257">
                     <a:s>Observation</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="269">
                  <a:s r="269">
                     <a:s>Min(</a:s>
                     <a:s r="268">
                        <a:s>
                           <a:s r="260">
                              <a:s r="259">
                                 <a:s>
                                    <a:s>ObsList</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> O</a:s>
                           </a:s>
                        </a:s>
                        <a:s> </a:s>
                        <a:s r="267">
                           <a:s>return </a:s>
                           <a:s r="266">
                              <a:s r="261">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="266">
                                 <a:s>ToQuantity(</a:s>
                                 <a:s r="265">
                                    <a:s r="263">
                                       <a:s r="262">
                                          <a:s>O</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="263">
                                          <a:s>value</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> as </a:s>
                                    <a:s r="264">
                                       <a:s>FHIR.Quantity</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>)</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="269" locator="204:3-204:72" xsi:type="Min">
            <source localId="268" locator="204:7-204:71" xsi:type="Query">
               <source localId="260" locator="204:7-204:15" alias="O">
                  <expression localId="259" locator="204:7-204:13" name="ObsList" xsi:type="OperandRef"/>
               </source>
               <return localId="267" locator="204:17-204:71">
                  <expression localId="266" locator="204:24-204:71" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="265" locator="204:47-204:70" strict="false" xsi:type="As">
                        <operand localId="263" locator="204:47-204:53" path="value" scope="O" xsi:type="Property"/>
                        <asTypeSpecifier localId="264" locator="204:58-204:70" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
                     </operand>
                  </expression>
               </return>
            </source>
         </expression>
         <operand name="ObsList">
            <operandTypeSpecifier localId="258" locator="203:43-203:59" xsi:type="ListTypeSpecifier">
               <elementType localId="257" locator="203:48-203:58" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="281" locator="215:1-216:61" name="ConditionsByConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="281">
               <a:s>// -------------------------------------------------- CONDITIONS -------------------------------------------------------

/**
 * Filters Conditions by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List&lt;Observation>} a list of Conditions matching the concept, or null if null was passed in
 */define function ConditionsByConcept(Koncept </a:s>
               <a:s r="271">
                  <a:s>System.Concept</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="280">
                  <a:s r="280">
                     <a:s>
                        <a:s r="273">
                           <a:s r="272">
                              <a:s r="272">
                                 <a:s>[Condition]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="279">
                        <a:s>where </a:s>
                        <a:s r="279">
                           <a:s r="277">
                              <a:s r="274">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="277">
                                 <a:s>ToConcept(</a:s>
                                 <a:s r="276">
                                    <a:s r="275">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="276">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="278">
                              <a:s>Koncept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="280" locator="216:3-216:61" xsi:type="Query">
            <source localId="273" locator="216:3-216:15" alias="C">
               <expression localId="272" locator="216:3-216:13" dataType="fhir:Condition" templateId="http://hl7.org/fhir/StructureDefinition/Condition" xsi:type="Retrieve"/>
            </source>
            <where localId="279" locator="216:17-216:61" xsi:type="Equivalent">
               <operand localId="277" locator="216:23-216:51" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="276" locator="216:45-216:50" path="code" scope="C" xsi:type="Property"/>
               </operand>
               <operand localId="278" locator="216:55-216:61" name="Koncept" xsi:type="OperandRef"/>
            </where>
         </expression>
         <operand name="Koncept">
            <operandTypeSpecifier localId="271" locator="215:45-215:58" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="291" locator="224:1-225:68" name="Confirmed" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="291">
               <a:s>/**
 * Conditions that are confirmed. In FHIR R4, this is reflected by verificationStatus: 'confirmed'.
 * @see http://hl7.org/fhir/R4/valueset-condition-ver-status.html
 * @param CondList - a list of Conditions
 * @returns {List&lt;Condition>} a list of confirmed Conditions, or null if null was passed in
 */define function Confirmed(CondList </a:s>
               <a:s r="283">
                  <a:s>List&lt;</a:s>
                  <a:s r="282">
                     <a:s>Condition</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="290">
                  <a:s r="290">
                     <a:s>
                        <a:s r="285">
                           <a:s r="284">
                              <a:s>
                                 <a:s>CondList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="289">
                        <a:s>where </a:s>
                        <a:s r="289">
                           <a:s r="287">
                              <a:s r="286">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="287">
                                 <a:s>verificationStatus</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="288">
                              <a:s>&quot;Condition Confirmed code&quot;</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="290" locator="225:3-225:68" xsi:type="Query">
            <source localId="285" locator="225:3-225:12" alias="C">
               <expression localId="284" locator="225:3-225:10" name="CondList" xsi:type="OperandRef"/>
            </source>
            <where localId="289" locator="225:14-225:68" xsi:type="Equivalent">
               <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="287" locator="225:20-225:39" path="verificationStatus" scope="C" xsi:type="Property"/>
               </operand>
               <operand xsi:type="ToConcept">
                  <operand localId="288" locator="225:43-225:68" name="Condition Confirmed code" xsi:type="CodeRef"/>
               </operand>
            </where>
         </expression>
         <operand name="CondList">
            <operandTypeSpecifier localId="283" locator="224:36-224:50" xsi:type="ListTypeSpecifier">
               <elementType localId="282" locator="224:41-224:49" name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="305" locator="235:1-238:29" name="ActiveCondition" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="305">
               <a:s>/**
 * Conditions that are active. In FHIR R4, this is reflected by clinicalStatus: 'active' and the absence of any
 * abatement information (i.e., if it abated, it is no longer active).
 * TODO: Rename to Active once the execution engine supports overloaded functions.
 * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html
 * @param CondList - a list of Conditions
 * @returns {List&lt;Condition>} a list of active Conditions, or null if null was passed in
 */define function ActiveCondition(CondList </a:s>
               <a:s r="293">
                  <a:s>List&lt;</a:s>
                  <a:s r="292">
                     <a:s>Condition</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="304">
                  <a:s r="304">
                     <a:s>
                        <a:s r="295">
                           <a:s r="294">
                              <a:s>
                                 <a:s>CondList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="303">
                        <a:s>where </a:s>
                        <a:s r="303">
                           <a:s r="299">
                              <a:s r="297">
                                 <a:s r="296">
                                    <a:s>C</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="297">
                                    <a:s>clinicalStatus</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> ~ </a:s>
                              <a:s r="298">
                                 <a:s>&quot;Condition Active code&quot;</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      and </a:s>
                           <a:s r="302">
                              <a:s r="301">
                                 <a:s r="300">
                                    <a:s>C</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="301">
                                    <a:s>abatement</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> is null</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="304" locator="236:3-238:29" xsi:type="Query">
            <source localId="295" locator="236:3-236:12" alias="C">
               <expression localId="294" locator="236:3-236:10" name="CondList" xsi:type="OperandRef"/>
            </source>
            <where localId="303" locator="237:5-238:29" xsi:type="And">
               <operand localId="299" locator="237:11-237:52" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="297" locator="237:11-237:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="298" locator="237:30-237:52" name="Condition Active code" xsi:type="CodeRef"/>
                  </operand>
               </operand>
               <operand localId="302" locator="238:11-238:29" xsi:type="IsNull">
                  <operand localId="301" locator="238:11-238:21" path="abatement" scope="C" xsi:type="Property"/>
               </operand>
            </where>
         </expression>
         <operand name="CondList">
            <operandTypeSpecifier localId="293" locator="235:42-235:56" xsi:type="ListTypeSpecifier">
               <elementType localId="292" locator="235:47-235:55" name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="325" locator="248:1-252:52" name="ActiveOrRecurring" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="325">
               <a:s>/**
 * Conditions that are active or recurring. In FHIR R4, this is reflected by clinicalStatus: 'active', 'recurrence', or
 * 'relapse'.  We do not check for null abatement information because it may have dates from when the now recurring
 * condition initially went into remission.
 * @see http://hl7.org/fhir/R4/valueset-condition-clinical.html
 * @param CondList - a list of Conditions
 * @returns {List&lt;Condition>} a list of active or recurring Conditions, or null if null was passed in
 */define function ActiveOrRecurring(CondList </a:s>
               <a:s r="307">
                  <a:s>List&lt;</a:s>
                  <a:s r="306">
                     <a:s>Condition</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="324">
                  <a:s r="324">
                     <a:s>
                        <a:s r="309">
                           <a:s r="308">
                              <a:s>
                                 <a:s>CondList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="323">
                        <a:s>where </a:s>
                        <a:s r="323">
                           <a:s r="318">
                              <a:s r="313">
                                 <a:s r="311">
                                    <a:s r="310">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="311">
                                       <a:s>clinicalStatus</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> ~ </a:s>
                                 <a:s r="312">
                                    <a:s>&quot;Condition Active code&quot;</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      or </a:s>
                              <a:s r="317">
                                 <a:s r="315">
                                    <a:s r="314">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="315">
                                       <a:s>clinicalStatus</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> ~ </a:s>
                                 <a:s r="316">
                                    <a:s>&quot;Condition Recurrence code&quot;</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="322">
                              <a:s r="320">
                                 <a:s r="319">
                                    <a:s>C</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="320">
                                    <a:s>clinicalStatus</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> ~ </a:s>
                              <a:s r="321">
                                 <a:s>&quot;Condition Relapse code&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="324" locator="249:3-252:52" xsi:type="Query">
            <source localId="309" locator="249:3-249:12" alias="C">
               <expression localId="308" locator="249:3-249:10" name="CondList" xsi:type="OperandRef"/>
            </source>
            <where localId="323" locator="250:5-252:52" xsi:type="Or">
               <operand localId="318" locator="250:11-251:55" xsi:type="Or">
                  <operand localId="313" locator="250:11-250:52" xsi:type="Equivalent">
                     <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="311" locator="250:11-250:26" path="clinicalStatus" scope="C" xsi:type="Property"/>
                     </operand>
                     <operand xsi:type="ToConcept">
                        <operand localId="312" locator="250:30-250:52" name="Condition Active code" xsi:type="CodeRef"/>
                     </operand>
                  </operand>
                  <operand localId="317" locator="251:10-251:55" xsi:type="Equivalent">
                     <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="315" locator="251:10-251:25" path="clinicalStatus" scope="C" xsi:type="Property"/>
                     </operand>
                     <operand xsi:type="ToConcept">
                        <operand localId="316" locator="251:29-251:55" name="Condition Recurrence code" xsi:type="CodeRef"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="322" locator="252:10-252:52" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="320" locator="252:10-252:25" path="clinicalStatus" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="321" locator="252:29-252:52" name="Condition Relapse code" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
         <operand name="CondList">
            <operandTypeSpecifier localId="307" locator="248:44-248:58" xsi:type="ListTypeSpecifier">
               <elementType localId="306" locator="248:49-248:57" name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="359" locator="262:1-267:49" name="ConditionLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="359">
               <a:s>/**
 * Conditions with an onset or recorded date in the specified &quot;look back&quot; period.  For example, pregnancy in
 * the last 42 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param CondList - a list of Conditions
 * @returns {List&lt;Condition>} a list of Conditions with onset or recorded date specified lookback period, or null
 * if null was passed in
 */define function ConditionLookBack(CondList </a:s>
               <a:s r="327">
                  <a:s>List&lt;</a:s>
                  <a:s r="326">
                     <a:s>Condition</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="328">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="358">
                  <a:s r="358">
                     <a:s>
                        <a:s r="330">
                           <a:s r="329">
                              <a:s>
                                 <a:s>CondList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="336">
                           <a:s>LookBackInterval: </a:s>
                           <a:s r="335">
                              <a:s>Interval[</a:s>
                              <a:s r="333">
                                 <a:s r="331">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="332">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="334">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="357">
                        <a:s>where </a:s>
                        <a:s r="357">
                           <a:s r="351">
                              <a:s r="343">
                                 <a:s r="341">
                                    <a:s r="340">
                                       <a:s>(</a:s>
                                       <a:s r="340">
                                          <a:s r="338">
                                             <a:s r="337">
                                                <a:s>C</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="338">
                                                <a:s>onset</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="339">
                                             <a:s>FHIR.dateTime</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="341">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> in </a:s>
                                 <a:s r="342">
                                    <a:s>LookBackInterval</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      or </a:s>
                              <a:s r="350">
                                 <a:s r="348">
                                    <a:s>PeriodToInterval(</a:s>
                                    <a:s r="347">
                                       <a:s r="345">
                                          <a:s r="344">
                                             <a:s>C</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="345">
                                             <a:s>onset</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="346">
                                          <a:s>FHIR.Period</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s r="350"> overlaps </a:s>
                                 <a:s r="349">
                                    <a:s>LookBackInterval</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="356">
                              <a:s r="354">
                                 <a:s r="353">
                                    <a:s r="352">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="353">
                                       <a:s>recordedDate</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="354">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> in </a:s>
                              <a:s r="355">
                                 <a:s>LookBackInterval</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="358" locator="263:3-267:49" xsi:type="Query">
            <source localId="330" locator="263:3-263:12" alias="C">
               <expression localId="329" locator="263:3-263:10" name="CondList" xsi:type="OperandRef"/>
            </source>
            <let localId="336" locator="264:9-264:59" identifier="LookBackInterval">
               <expression localId="335" locator="264:27-264:59" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="333" locator="264:36-264:51" xsi:type="Subtract">
                     <operand localId="331" locator="264:36-264:40" xsi:type="Now"/>
                     <operand localId="332" locator="264:44-264:51" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="334" locator="264:54-264:58" xsi:type="Now"/>
               </expression>
            </let>
            <where localId="357" locator="265:5-267:49" xsi:type="Or">
               <operand localId="351" locator="265:11-266:75" xsi:type="Or">
                  <operand localId="343" locator="265:11-265:62" xsi:type="In">
                     <operand localId="341" locator="265:11-265:42" path="value" xsi:type="Property">
                        <source localId="340" locator="265:11-265:36" strict="false" xsi:type="As">
                           <operand localId="338" locator="265:12-265:18" path="onset" scope="C" xsi:type="Property"/>
                           <asTypeSpecifier localId="339" locator="265:23-265:35" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                        </source>
                     </operand>
                     <operand localId="342" locator="265:47-265:62" name="LookBackInterval" xsi:type="QueryLetRef"/>
                  </operand>
                  <operand localId="350" locator="266:10-266:75" xsi:type="Overlaps">
                     <operand localId="348" locator="266:10-266:49" name="PeriodToInterval" xsi:type="FunctionRef">
                        <operand localId="347" locator="266:27-266:48" strict="false" xsi:type="As">
                           <operand localId="345" locator="266:27-266:33" path="onset" scope="C" xsi:type="Property"/>
                           <asTypeSpecifier localId="346" locator="266:38-266:48" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                        </operand>
                     </operand>
                     <operand localId="349" locator="266:60-266:75" name="LookBackInterval" xsi:type="QueryLetRef"/>
                  </operand>
               </operand>
               <operand localId="356" locator="267:10-267:49" xsi:type="In">
                  <operand localId="354" locator="267:10-267:29" path="value" xsi:type="Property">
                     <source localId="353" locator="267:10-267:23" path="recordedDate" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand localId="355" locator="267:34-267:49" name="LookBackInterval" xsi:type="QueryLetRef"/>
               </operand>
            </where>
         </expression>
         <operand name="CondList">
            <operandTypeSpecifier localId="327" locator="262:44-262:58" xsi:type="ListTypeSpecifier">
               <elementType localId="326" locator="262:49-262:57" name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="328" locator="262:70-262:84" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="401" locator="276:1-282:3" name="MostRecentCondition" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="401">
               <a:s>/**
 * The most recent condition.  For each Condition, this algorithm will use the Coalesce function, which uses the
 * first non-null result from these fields: onsetDateTime, onsetPeriod.end, onsetPeriod.start, assertedDate.
 * The found date will be used to compare Conditions and determine the most recent one.
 * @param CondList - a list of Conditions
 * @returns {Condition} the most recent Condition from the list, or null if null was passed in
 */define function MostRecentCondition(CondList </a:s>
               <a:s r="361">
                  <a:s>List&lt;</a:s>
                  <a:s r="360">
                     <a:s>Condition</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="400">
                  <a:s r="400">
                     <a:s>Last(</a:s>
                     <a:s r="399">
                        <a:s>
                           <a:s r="363">
                              <a:s r="362">
                                 <a:s>
                                    <a:s>CondList</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> C</a:s>
                           </a:s>
                        </a:s>
                        <a:s> </a:s>
                        <a:s r="398">
                           <a:s>sort by </a:s>
                           <a:s r="397">
                              <a:s r="396">
                                 <a:s>Coalesce(
    </a:s>
                                 <a:s r="383">
                                    <a:s r="382">
                                       <a:s>(</a:s>
                                       <a:s r="382">
                                          <a:s r="380">
                                             <a:s>onset</a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="381">
                                             <a:s>FHIR.dateTime</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="383">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="388">
                                    <a:s r="387">
                                       <a:s r="386">
                                          <a:s>(</a:s>
                                          <a:s r="386">
                                             <a:s r="384">
                                                <a:s>onset</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="385">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="387">
                                          <a:s>&quot;end&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="388">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="393">
                                    <a:s r="392">
                                       <a:s r="391">
                                          <a:s>(</a:s>
                                          <a:s r="391">
                                             <a:s r="389">
                                                <a:s>onset</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="390">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="392">
                                          <a:s>&quot;start&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="393">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="395">
                                    <a:s r="394">
                                       <a:s>recordedDate</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="395">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  )</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="400" locator="277:3-282:3" xsi:type="Last">
            <source localId="399" locator="277:8-281:23" xsi:type="Query">
               <source localId="363" locator="277:8-277:17" alias="C">
                  <expression localId="362" locator="277:8-277:15" name="CondList" xsi:type="OperandRef"/>
               </source>
               <sort localId="398" locator="277:19-281:23">
                  <by localId="397" locator="277:27-281:23" direction="asc" xsi:type="ByExpression">
                     <expression localId="396" locator="277:27-281:23" xsi:type="Coalesce">
                        <operand localId="383" locator="278:5-278:34" path="value" xsi:type="Property">
                           <source localId="382" locator="278:5-278:28" strict="false" xsi:type="As">
                              <operand localId="380" locator="278:6-278:10" name="onset" xsi:type="IdentifierRef"/>
                              <asTypeSpecifier localId="381" locator="278:15-278:27" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="388" locator="279:5-279:38" path="value" xsi:type="Property">
                           <source localId="387" locator="279:5-279:32" path="end" xsi:type="Property">
                              <source localId="386" locator="279:5-279:26" strict="false" xsi:type="As">
                                 <operand localId="384" locator="279:6-279:10" name="onset" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="385" locator="279:15-279:25" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                        <operand localId="393" locator="280:5-280:40" path="value" xsi:type="Property">
                           <source localId="392" locator="280:5-280:34" path="start" xsi:type="Property">
                              <source localId="391" locator="280:5-280:26" strict="false" xsi:type="As">
                                 <operand localId="389" locator="280:6-280:10" name="onset" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="390" locator="280:15-280:25" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                        <operand localId="395" locator="281:5-281:22" path="value" xsi:type="Property">
                           <source localId="394" locator="281:5-281:16" name="recordedDate" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="CondList">
            <operandTypeSpecifier localId="361" locator="276:46-276:60" xsi:type="ListTypeSpecifier">
               <elementType localId="360" locator="276:51-276:59" name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="412" locator="292:2-293:62" name="ProceduresByConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="412">
               <a:s>// -------------------------------------------------- PROCEDURES ------------------------------------------------------

 /**
  * Filters Procedures by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
  * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
  * @returns {List&lt;Procedure>} a list of Procedures matching the concept, or null if null was passed in
  */define function ProceduresByConcept(Koncept </a:s>
               <a:s r="402">
                  <a:s>System.Concept</a:s>
               </a:s>
               <a:s>):
   </a:s>
               <a:s r="411">
                  <a:s r="411">
                     <a:s>
                        <a:s r="404">
                           <a:s r="403">
                              <a:s r="403">
                                 <a:s>[Procedure]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> P</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="410">
                        <a:s>where </a:s>
                        <a:s r="410">
                           <a:s r="408">
                              <a:s r="405">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="408">
                                 <a:s>ToConcept(</a:s>
                                 <a:s r="407">
                                    <a:s r="406">
                                       <a:s>P</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="407">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="409">
                              <a:s>Koncept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="411" locator="293:4-293:62" xsi:type="Query">
            <source localId="404" locator="293:4-293:16" alias="P">
               <expression localId="403" locator="293:4-293:14" dataType="fhir:Procedure" templateId="http://hl7.org/fhir/StructureDefinition/Procedure" xsi:type="Retrieve"/>
            </source>
            <where localId="410" locator="293:18-293:62" xsi:type="Equivalent">
               <operand localId="408" locator="293:24-293:52" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="407" locator="293:46-293:51" path="code" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="409" locator="293:56-293:62" name="Koncept" xsi:type="OperandRef"/>
            </where>
         </expression>
         <operand name="Koncept">
            <operandTypeSpecifier localId="402" locator="292:46-292:59" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="423" locator="301:1-303:38" name="Completed" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="423">
               <a:s>/**
 * Procedures that are completed. In FHIR R4, this is reflected by status: 'completed'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List&lt;Procedure>} a list of completed Procedures, or null if null was passed in
 */define function Completed(ProcList </a:s>
               <a:s r="414">
                  <a:s>List&lt;</a:s>
                  <a:s r="413">
                     <a:s>Procedure</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="422">
                  <a:s r="422">
                     <a:s>
                        <a:s r="416">
                           <a:s r="415">
                              <a:s>
                                 <a:s>ProcList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> P</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="421">
                        <a:s>where </a:s>
                        <a:s r="421">
                           <a:s r="419">
                              <a:s r="418">
                                 <a:s r="417">
                                    <a:s>P</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="418">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="419">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="420">
                              <a:s>'completed'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="422" locator="302:3-303:38" xsi:type="Query">
            <source localId="416" locator="302:3-302:12" alias="P">
               <expression localId="415" locator="302:3-302:10" name="ProcList" xsi:type="OperandRef"/>
            </source>
            <where localId="421" locator="303:5-303:38" xsi:type="Equal">
               <operand localId="419" locator="303:11-303:24" path="value" xsi:type="Property">
                  <source localId="418" locator="303:11-303:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="420" locator="303:28-303:38" valueType="t:String" value="completed" xsi:type="Literal"/>
            </where>
         </expression>
         <operand name="ProcList">
            <operandTypeSpecifier localId="414" locator="301:36-301:50" xsi:type="ListTypeSpecifier">
               <elementType localId="413" locator="301:41-301:49" name="fhir:Procedure" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="434" locator="311:1-313:40" name="ProcedureInProgress" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="434">
               <a:s>/**
 * Procedures that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List&lt;Procedure>} a list of completed Procedures, or null if null was passed in
 */define function ProcedureInProgress(ProcList </a:s>
               <a:s r="425">
                  <a:s>List&lt;</a:s>
                  <a:s r="424">
                     <a:s>Procedure</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="433">
                  <a:s r="433">
                     <a:s>
                        <a:s r="427">
                           <a:s r="426">
                              <a:s>
                                 <a:s>ProcList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> P</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="432">
                        <a:s>where </a:s>
                        <a:s r="432">
                           <a:s r="430">
                              <a:s r="429">
                                 <a:s r="428">
                                    <a:s>P</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="429">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="430">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="431">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="433" locator="312:3-313:40" xsi:type="Query">
            <source localId="427" locator="312:3-312:12" alias="P">
               <expression localId="426" locator="312:3-312:10" name="ProcList" xsi:type="OperandRef"/>
            </source>
            <where localId="432" locator="313:5-313:40" xsi:type="Equal">
               <operand localId="430" locator="313:11-313:24" path="value" xsi:type="Property">
                  <source localId="429" locator="313:11-313:18" path="status" scope="P" xsi:type="Property"/>
               </operand>
               <operand localId="431" locator="313:28-313:40" valueType="t:String" value="in-progress" xsi:type="Literal"/>
            </where>
         </expression>
         <operand name="ProcList">
            <operandTypeSpecifier localId="425" locator="311:46-311:60" xsi:type="ListTypeSpecifier">
               <elementType localId="424" locator="311:51-311:59" name="fhir:Procedure" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="450" locator="322:1-324:92" name="ProcedurePerformance" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="450">
               <a:s>/**
 * Procedures that actually happened or are happening. In FHIR R4, there are a few properties that negate the
 * procedure, most notably when status is 'preparation', 'not-done', 'entered-in-error', or 'unknown'.
 * @see http://hl7.org/fhir/R4/valueset-event-status.html
 * @param ProcList - a list of Procedures
 * @returns {List&lt;Procedure>} a list of Procedures that actually happened or are happening, or null if null was passed in
 */define function ProcedurePerformance(ProcList </a:s>
               <a:s r="436">
                  <a:s>List&lt;</a:s>
                  <a:s r="435">
                     <a:s>Procedure</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="449">
                  <a:s r="449">
                     <a:s>
                        <a:s r="438">
                           <a:s r="437">
                              <a:s>
                                 <a:s>ProcList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> P</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="448">
                        <a:s>where </a:s>
                        <a:s r="448">
                           <a:s>not </a:s>
                           <a:s r="447">
                              <a:s>(</a:s>
                              <a:s r="447">
                                 <a:s r="441">
                                    <a:s r="440">
                                       <a:s r="439">
                                          <a:s>P</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="440">
                                          <a:s>status</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="441">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> in </a:s>
                                 <a:s r="446">
                                    <a:s>{</a:s>
                                    <a:s r="442">
                                       <a:s>'preparation'</a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="443">
                                       <a:s>'not-done'</a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="444">
                                       <a:s>'entered-in-error'</a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="445">
                                       <a:s>'unknown'</a:s>
                                    </a:s>
                                    <a:s>}</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="449" locator="323:3-324:92" xsi:type="Query">
            <source localId="438" locator="323:3-323:12" alias="P">
               <expression localId="437" locator="323:3-323:10" name="ProcList" xsi:type="OperandRef"/>
            </source>
            <where localId="448" locator="324:5-324:92" xsi:type="Not">
               <operand localId="447" locator="324:15-324:92" xsi:type="In">
                  <operand localId="441" locator="324:16-324:29" path="value" xsi:type="Property">
                     <source localId="440" locator="324:16-324:23" path="status" scope="P" xsi:type="Property"/>
                  </operand>
                  <operand localId="446" locator="324:34-324:91" xsi:type="List">
                     <element localId="442" locator="324:35-324:47" valueType="t:String" value="preparation" xsi:type="Literal"/>
                     <element localId="443" locator="324:50-324:59" valueType="t:String" value="not-done" xsi:type="Literal"/>
                     <element localId="444" locator="324:62-324:79" valueType="t:String" value="entered-in-error" xsi:type="Literal"/>
                     <element localId="445" locator="324:82-324:90" valueType="t:String" value="unknown" xsi:type="Literal"/>
                  </operand>
               </operand>
            </where>
         </expression>
         <operand name="ProcList">
            <operandTypeSpecifier localId="436" locator="322:47-322:61" xsi:type="ListTypeSpecifier">
               <elementType localId="435" locator="322:52-322:60" name="fhir:Procedure" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="478" locator="335:1-339:79" name="ProcedureLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="478">
               <a:s>/**
 * Procedures performed in the specified &quot;look back&quot; period.  For example, PCIs performed in the
 * past 2 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ProcList - a list of Procedures
 * @param LookBack - the lookback period for when the procedure was performed
 * @returns {List&lt;Procedure>} a list of Procedures performed in the look back period, or null if null
 * was passed in
 */define function ProcedureLookBack(ProcList </a:s>
               <a:s r="452">
                  <a:s>List&lt;</a:s>
                  <a:s r="451">
                     <a:s>Procedure</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="453">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="477">
                  <a:s r="477">
                     <a:s>
                        <a:s r="455">
                           <a:s r="454">
                              <a:s>
                                 <a:s>ProcList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> P</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="461">
                           <a:s>LookBackInterval: </a:s>
                           <a:s r="460">
                              <a:s>Interval[</a:s>
                              <a:s r="458">
                                 <a:s r="456">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="457">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="459">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="476">
                        <a:s>where </a:s>
                        <a:s r="476">
                           <a:s r="468">
                              <a:s r="466">
                                 <a:s r="465">
                                    <a:s>(</a:s>
                                    <a:s r="465">
                                       <a:s r="463">
                                          <a:s r="462">
                                             <a:s>P</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="463">
                                             <a:s>performed</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="464">
                                          <a:s>FHIR.dateTime</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="466">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> in </a:s>
                              <a:s r="467">
                                 <a:s>LookBackInterval</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="475">
                              <a:s r="473">
                                 <a:s>PeriodToInterval(</a:s>
                                 <a:s r="472">
                                    <a:s r="470">
                                       <a:s r="469">
                                          <a:s>P</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="470">
                                          <a:s>performed</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> as </a:s>
                                    <a:s r="471">
                                       <a:s>FHIR.Period</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s r="475"> overlaps </a:s>
                              <a:s r="474">
                                 <a:s>LookBackInterval</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="477" locator="336:3-339:79" xsi:type="Query">
            <source localId="455" locator="336:3-336:12" alias="P">
               <expression localId="454" locator="336:3-336:10" name="ProcList" xsi:type="OperandRef"/>
            </source>
            <let localId="461" locator="337:9-337:59" identifier="LookBackInterval">
               <expression localId="460" locator="337:27-337:59" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="458" locator="337:36-337:51" xsi:type="Subtract">
                     <operand localId="456" locator="337:36-337:40" xsi:type="Now"/>
                     <operand localId="457" locator="337:44-337:51" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="459" locator="337:54-337:58" xsi:type="Now"/>
               </expression>
            </let>
            <where localId="476" locator="338:5-339:79" xsi:type="Or">
               <operand localId="468" locator="338:11-338:66" xsi:type="In">
                  <operand localId="466" locator="338:11-338:46" path="value" xsi:type="Property">
                     <source localId="465" locator="338:11-338:40" strict="false" xsi:type="As">
                        <operand localId="463" locator="338:12-338:22" path="performed" scope="P" xsi:type="Property"/>
                        <asTypeSpecifier localId="464" locator="338:27-338:39" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                     </source>
                  </operand>
                  <operand localId="467" locator="338:51-338:66" name="LookBackInterval" xsi:type="QueryLetRef"/>
               </operand>
               <operand localId="475" locator="339:10-339:79" xsi:type="Overlaps">
                  <operand localId="473" locator="339:10-339:53" name="PeriodToInterval" xsi:type="FunctionRef">
                     <operand localId="472" locator="339:27-339:52" strict="false" xsi:type="As">
                        <operand localId="470" locator="339:27-339:37" path="performed" scope="P" xsi:type="Property"/>
                        <asTypeSpecifier localId="471" locator="339:42-339:52" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                     </operand>
                  </operand>
                  <operand localId="474" locator="339:64-339:79" name="LookBackInterval" xsi:type="QueryLetRef"/>
               </operand>
            </where>
         </expression>
         <operand name="ProcList">
            <operandTypeSpecifier localId="452" locator="335:44-335:58" xsi:type="ListTypeSpecifier">
               <elementType localId="451" locator="335:49-335:57" name="fhir:Procedure" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="453" locator="335:70-335:84" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="516" locator="348:1-353:3" name="MostRecentProcedure" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="516">
               <a:s>/**
 * The most recent procedure.  For each Procedure, this algorithm will use the Coalesce function, which returns the
 * first non-null result from these fields: performedDateTime, performedPeriod.end, performedPeriod.start.
 * The found date will be used to compare Procedures and determine the most recent one.
 * @param ProcList - a list of Procedures
 * @returns {Procedure} the most recent Procedure from the list, or null if null was passed in
 */define function MostRecentProcedure(ProcList </a:s>
               <a:s r="480">
                  <a:s>List&lt;</a:s>
                  <a:s r="479">
                     <a:s>Procedure</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="515">
                  <a:s r="515">
                     <a:s>Last(</a:s>
                     <a:s r="514">
                        <a:s>
                           <a:s r="482">
                              <a:s r="481">
                                 <a:s>
                                    <a:s>ProcList</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> P</a:s>
                           </a:s>
                        </a:s>
                        <a:s> </a:s>
                        <a:s r="513">
                           <a:s>sort by </a:s>
                           <a:s r="512">
                              <a:s r="511">
                                 <a:s>Coalesce(
    </a:s>
                                 <a:s r="500">
                                    <a:s r="499">
                                       <a:s>(</a:s>
                                       <a:s r="499">
                                          <a:s r="497">
                                             <a:s>performed</a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="498">
                                             <a:s>FHIR.dateTime</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="500">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="505">
                                    <a:s r="504">
                                       <a:s r="503">
                                          <a:s>(</a:s>
                                          <a:s r="503">
                                             <a:s r="501">
                                                <a:s>performed</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="502">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="504">
                                          <a:s>&quot;end&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="505">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>,
    </a:s>
                                 <a:s r="510">
                                    <a:s r="509">
                                       <a:s r="508">
                                          <a:s>(</a:s>
                                          <a:s r="508">
                                             <a:s r="506">
                                                <a:s>performed</a:s>
                                             </a:s>
                                             <a:s> as </a:s>
                                             <a:s r="507">
                                                <a:s>FHIR.Period</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="509">
                                          <a:s>&quot;start&quot;</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="510">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  )</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="515" locator="349:3-353:3" xsi:type="Last">
            <source localId="514" locator="349:8-352:45" xsi:type="Query">
               <source localId="482" locator="349:8-349:17" alias="P">
                  <expression localId="481" locator="349:8-349:15" name="ProcList" xsi:type="OperandRef"/>
               </source>
               <sort localId="513" locator="349:19-352:45">
                  <by localId="512" locator="349:27-352:45" direction="asc" xsi:type="ByExpression">
                     <expression localId="511" locator="349:27-352:45" xsi:type="Coalesce">
                        <operand localId="500" locator="350:5-350:38" path="value" xsi:type="Property">
                           <source localId="499" locator="350:5-350:32" strict="false" xsi:type="As">
                              <operand localId="497" locator="350:6-350:14" name="performed" xsi:type="IdentifierRef"/>
                              <asTypeSpecifier localId="498" locator="350:19-350:31" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                           </source>
                        </operand>
                        <operand localId="505" locator="351:5-351:42" path="value" xsi:type="Property">
                           <source localId="504" locator="351:5-351:36" path="end" xsi:type="Property">
                              <source localId="503" locator="351:5-351:30" strict="false" xsi:type="As">
                                 <operand localId="501" locator="351:6-351:14" name="performed" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="502" locator="351:19-351:29" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                        <operand localId="510" locator="352:5-352:44" path="value" xsi:type="Property">
                           <source localId="509" locator="352:5-352:38" path="start" xsi:type="Property">
                              <source localId="508" locator="352:5-352:30" strict="false" xsi:type="As">
                                 <operand localId="506" locator="352:6-352:14" name="performed" xsi:type="IdentifierRef"/>
                                 <asTypeSpecifier localId="507" locator="352:19-352:29" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
                              </source>
                           </source>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="ProcList">
            <operandTypeSpecifier localId="480" locator="348:46-348:60" xsi:type="ListTypeSpecifier">
               <elementType localId="479" locator="348:51-348:59" name="fhir:Procedure" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="529" locator="365:1-367:55" name="ServiceRequestActiveOrCompleted" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="529">
               <a:s>// ----------------------------------------------- SERVICEREQUESTS -----------------------------------------------------

/**
 * ServiceRequests that are active or completed. In FHIR R4, this is reflected by the corresponding
 * status values.
 * @see http://hl7.org/fhir/R4/valueset-request-status.html
 * @param ServiceRequestList - a list of ServiceRequests
 * @returns {List&lt;ServiceRequest>} a list of accepted, in-progress, or completed ProcedureRequests,
 * or null if null was passed in
 */define function ServiceRequestActiveOrCompleted(ServiceRequestList </a:s>
               <a:s r="518">
                  <a:s>List&lt;</a:s>
                  <a:s r="517">
                     <a:s>ServiceRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="528">
                  <a:s r="528">
                     <a:s>
                        <a:s r="520">
                           <a:s r="519">
                              <a:s>
                                 <a:s>ServiceRequestList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> S</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="527">
                        <a:s>where </a:s>
                        <a:s r="527">
                           <a:s r="523">
                              <a:s r="522">
                                 <a:s r="521">
                                    <a:s>S</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="522">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="523">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="526">
                              <a:s>List{</a:s>
                              <a:s r="524">
                                 <a:s>'active'</a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="525">
                                 <a:s>'completed'</a:s>
                              </a:s>
                              <a:s>}</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="528" locator="366:3-367:55" xsi:type="Query">
            <source localId="520" locator="366:3-366:22" alias="S">
               <expression localId="519" locator="366:3-366:20" name="ServiceRequestList" xsi:type="OperandRef"/>
            </source>
            <where localId="527" locator="367:5-367:55" xsi:type="In">
               <operand localId="523" locator="367:11-367:24" path="value" xsi:type="Property">
                  <source localId="522" locator="367:11-367:18" path="status" scope="S" xsi:type="Property"/>
               </operand>
               <operand localId="526" locator="367:29-367:55" xsi:type="List">
                  <element localId="524" locator="367:34-367:41" valueType="t:String" value="active" xsi:type="Literal"/>
                  <element localId="525" locator="367:44-367:54" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
         <operand name="ServiceRequestList">
            <operandTypeSpecifier localId="518" locator="365:68-365:87" xsi:type="ListTypeSpecifier">
               <elementType localId="517" locator="365:73-365:86" name="fhir:ServiceRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="545" locator="378:1-380:65" name="ServiceRequestLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="545">
               <a:s>/**
 * ServiceRequests ordered in the specified &quot;look back&quot; period.  For example, PCIs ordered in the
 * past 2 weeks.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param ServiceRequestList - a list of ServiceRequests
 * @param LookBack - the lookback period for when the service was ordered
 * @returns {List&lt;ServiceRequest>} a list of ServiceRequests ordered in the look back period, or null if null
 * was passed in
 */define function ServiceRequestLookBack(ServiceRequestList </a:s>
               <a:s r="531">
                  <a:s>List&lt;</a:s>
                  <a:s r="530">
                     <a:s>ServiceRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="532">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="544">
                  <a:s r="544">
                     <a:s>
                        <a:s r="534">
                           <a:s r="533">
                              <a:s>
                                 <a:s>ServiceRequestList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> S</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="543">
                        <a:s>where </a:s>
                        <a:s r="543">
                           <a:s r="537">
                              <a:s r="536">
                                 <a:s r="535">
                                    <a:s>S</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="536">
                                    <a:s>authoredOn</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="537">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="542">
                              <a:s>Interval[</a:s>
                              <a:s r="540">
                                 <a:s r="538">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="539">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="541">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="544" locator="379:3-380:65" xsi:type="Query">
            <source localId="534" locator="379:3-379:22" alias="S">
               <expression localId="533" locator="379:3-379:20" name="ServiceRequestList" xsi:type="OperandRef"/>
            </source>
            <where localId="543" locator="380:5-380:65" xsi:type="In">
               <operand localId="537" locator="380:11-380:28" path="value" xsi:type="Property">
                  <source localId="536" locator="380:11-380:22" path="authoredOn" scope="S" xsi:type="Property"/>
               </operand>
               <operand localId="542" locator="380:33-380:65" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="540" locator="380:42-380:57" xsi:type="Subtract">
                     <operand localId="538" locator="380:42-380:46" xsi:type="Now"/>
                     <operand localId="539" locator="380:50-380:57" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="541" locator="380:60-380:64" xsi:type="Now"/>
               </operand>
            </where>
         </expression>
         <operand name="ServiceRequestList">
            <operandTypeSpecifier localId="531" locator="378:59-378:78" xsi:type="ListTypeSpecifier">
               <elementType localId="530" locator="378:64-378:77" name="fhir:ServiceRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="532" locator="378:90-378:104" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="556" locator="399:1-400:43" name="ActiveMedicationRequest" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="556">
               <a:s>// -------------------------------------------------- MEDICATIONS ------------------------------------------------------

/**
* Medication requests that are active.  In FHIR R4, this is reflected by MedicationRequest with status 'active'.
* Note that in R4, the MedicationRequest Boundaries and Relationships now says: &quot;When reporting on the usage of
* a medication by a patient, the MedicationStatement resource should be used.&quot; It also indicates that:
* &quot;A medication statement is not a part of the prescribe->dispense->administer sequence but is a report that
* such a sequence (or at least a part of it) did take place resulting in a belief that the patient has received
* a particular medication.&quot; In this regard, MedicationStatement is more appropriate as an indication of an actually
* active medication, although it's not clear if vendors really will automatically create MedicationStatements in
* these cases or not.  Until we know, MedicationRequest may be the best proxy we have for an active medication.
* TODO: Should the &quot;intent&quot; field be considered (e.g., is it still active if intent is &quot;proposal&quot; or &quot;plan&quot;)?
* TODO: Rename to Active once the execution engine supports overloaded functions.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationRequests
* @returns {List&lt;MedicationRequest>} a list of active medication requests, or null if null was passed in
*/define function ActiveMedicationRequest(MedList </a:s>
               <a:s r="547">
                  <a:s>List&lt;</a:s>
                  <a:s r="546">
                     <a:s>MedicationRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="555">
                  <a:s r="555">
                     <a:s>
                        <a:s r="549">
                           <a:s r="548">
                              <a:s>
                                 <a:s>MedList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> M</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="554">
                        <a:s>where </a:s>
                        <a:s r="554">
                           <a:s r="552">
                              <a:s r="551">
                                 <a:s r="550">
                                    <a:s>M</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="551">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="552">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="553">
                              <a:s>'active'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="555" locator="400:3-400:43" xsi:type="Query">
            <source localId="549" locator="400:3-400:11" alias="M">
               <expression localId="548" locator="400:3-400:9" name="MedList" xsi:type="OperandRef"/>
            </source>
            <where localId="554" locator="400:13-400:43" xsi:type="Equal">
               <operand localId="552" locator="400:19-400:32" path="value" xsi:type="Property">
                  <source localId="551" locator="400:19-400:26" path="status" scope="M" xsi:type="Property"/>
               </operand>
               <operand localId="553" locator="400:36-400:43" valueType="t:String" value="active" xsi:type="Literal"/>
            </where>
         </expression>
         <operand name="MedList">
            <operandTypeSpecifier localId="547" locator="399:49-399:71" xsi:type="ListTypeSpecifier">
               <elementType localId="546" locator="399:54-399:70" name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="573" locator="410:1-413:37" name="ActiveOrCompletedMedicationRequest" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="573">
               <a:s>/**
* Medication requests that are active or completed, according to a prescription.  In FHIR R4, this is reflected by MedicationRequest
* with status 'active' or 'completed'.  See the note above (in ActiveMedicationRequest) for more nuance regarding MedicationRequest
* vs. MedicationStatement.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationRequests
* @returns {List&lt;MedicationRequest>} a list of active medication requests, or null if null was passed in
*/define function ActiveOrCompletedMedicationRequest(MedList </a:s>
               <a:s r="558">
                  <a:s>List&lt;</a:s>
                  <a:s r="557">
                     <a:s>MedicationRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="572">
                  <a:s r="572">
                     <a:s>
                        <a:s r="560">
                           <a:s r="559">
                              <a:s>
                                 <a:s>MedList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> M</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="571">
                        <a:s>where </a:s>
                        <a:s r="571">
                           <a:s r="565">
                              <a:s r="563">
                                 <a:s r="562">
                                    <a:s r="561">
                                       <a:s>M</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="562">
                                       <a:s>status</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="563">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="564">
                                 <a:s>'active'</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="570">
                              <a:s r="568">
                                 <a:s r="567">
                                    <a:s r="566">
                                       <a:s>M</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="567">
                                       <a:s>status</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="568">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="569">
                                 <a:s>'completed'</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="572" locator="411:3-413:37" xsi:type="Query">
            <source localId="560" locator="411:3-411:11" alias="M">
               <expression localId="559" locator="411:3-411:9" name="MedList" xsi:type="OperandRef"/>
            </source>
            <where localId="571" locator="412:5-413:37" xsi:type="Or">
               <operand localId="565" locator="412:11-412:35" xsi:type="Equal">
                  <operand localId="563" locator="412:11-412:24" path="value" xsi:type="Property">
                     <source localId="562" locator="412:11-412:18" path="status" scope="M" xsi:type="Property"/>
                  </operand>
                  <operand localId="564" locator="412:28-412:35" valueType="t:String" value="active" xsi:type="Literal"/>
               </operand>
               <operand localId="570" locator="413:10-413:37" xsi:type="Equal">
                  <operand localId="568" locator="413:10-413:23" path="value" xsi:type="Property">
                     <source localId="567" locator="413:10-413:17" path="status" scope="M" xsi:type="Property"/>
                  </operand>
                  <operand localId="569" locator="413:27-413:37" valueType="t:String" value="completed" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
         <operand name="MedList">
            <operandTypeSpecifier localId="558" locator="410:60-410:82" xsi:type="ListTypeSpecifier">
               <elementType localId="557" locator="410:65-410:81" name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="596" locator="423:1-427:35" name="ActiveCompletedOrStoppedMedicationRequest" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="596">
               <a:s>/**
* Medication requests that are active, completed, or stopped, according to a prescription.  In FHIR R4, this is
* reflected by MedicationRequest with status 'active', 'completed', or 'stopped'. See the note above
* (in ActiveMedicationRequest) for more nuance regarding MedicationRequest vs. MedicationStatement.
* @see http://hl7.org/fhir/R4/valueset-medicationrequest-status.html
* @param MedList - a list of MedicationOrders
* @returns {List&lt;MedicationRequestr>} a list of active medication requests, or null if null was passed in
*/define function ActiveCompletedOrStoppedMedicationRequest(MedList </a:s>
               <a:s r="575">
                  <a:s>List&lt;</a:s>
                  <a:s r="574">
                     <a:s>MedicationRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="595">
                  <a:s r="595">
                     <a:s>
                        <a:s r="577">
                           <a:s r="576">
                              <a:s>
                                 <a:s>MedList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> M</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="594">
                        <a:s>where </a:s>
                        <a:s r="594">
                           <a:s r="588">
                              <a:s r="582">
                                 <a:s r="580">
                                    <a:s r="579">
                                       <a:s r="578">
                                          <a:s>M</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="579">
                                          <a:s>status</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="580">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> = </a:s>
                                 <a:s r="581">
                                    <a:s>'active'</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      or </a:s>
                              <a:s r="587">
                                 <a:s r="585">
                                    <a:s r="584">
                                       <a:s r="583">
                                          <a:s>M</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="584">
                                          <a:s>status</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="585">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> = </a:s>
                                 <a:s r="586">
                                    <a:s>'completed'</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="593">
                              <a:s r="591">
                                 <a:s r="590">
                                    <a:s r="589">
                                       <a:s>M</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="590">
                                       <a:s>status</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="591">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> = </a:s>
                              <a:s r="592">
                                 <a:s>'stopped'</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="595" locator="424:3-427:35" xsi:type="Query">
            <source localId="577" locator="424:3-424:11" alias="M">
               <expression localId="576" locator="424:3-424:9" name="MedList" xsi:type="OperandRef"/>
            </source>
            <where localId="594" locator="425:5-427:35" xsi:type="Or">
               <operand localId="588" locator="425:11-426:37" xsi:type="Or">
                  <operand localId="582" locator="425:11-425:35" xsi:type="Equal">
                     <operand localId="580" locator="425:11-425:24" path="value" xsi:type="Property">
                        <source localId="579" locator="425:11-425:18" path="status" scope="M" xsi:type="Property"/>
                     </operand>
                     <operand localId="581" locator="425:28-425:35" valueType="t:String" value="active" xsi:type="Literal"/>
                  </operand>
                  <operand localId="587" locator="426:10-426:37" xsi:type="Equal">
                     <operand localId="585" locator="426:10-426:23" path="value" xsi:type="Property">
                        <source localId="584" locator="426:10-426:17" path="status" scope="M" xsi:type="Property"/>
                     </operand>
                     <operand localId="586" locator="426:27-426:37" valueType="t:String" value="completed" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand localId="593" locator="427:10-427:35" xsi:type="Equal">
                  <operand localId="591" locator="427:10-427:23" path="value" xsi:type="Property">
                     <source localId="590" locator="427:10-427:17" path="status" scope="M" xsi:type="Property"/>
                  </operand>
                  <operand localId="592" locator="427:27-427:35" valueType="t:String" value="stopped" xsi:type="Literal"/>
               </operand>
            </where>
         </expression>
         <operand name="MedList">
            <operandTypeSpecifier localId="575" locator="423:67-423:89" xsi:type="ListTypeSpecifier">
               <elementType localId="574" locator="423:72-423:88" name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="614" locator="437:1-440:48" name="MedicationRequestLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="614">
               <a:s>/**
* Medication requests that are issued in the specified &quot;look back&quot; period.
* TODO: Rename to LookBack once the execution engine supports overloaded functions.
* @param MedList - a list of Medications
* @param LookBack - the lookback period for when the medication was prescribed
* @returns {List&lt;MedicationRequest>} a list of Medications prescribed in the look back period, or null if null
* was passed in
*/define function MedicationRequestLookBack(MedList </a:s>
               <a:s r="598">
                  <a:s>List&lt;</a:s>
                  <a:s r="597">
                     <a:s>MedicationRequest</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="599">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="613">
                  <a:s r="613">
                     <a:s>
                        <a:s r="601">
                           <a:s r="600">
                              <a:s>
                                 <a:s>MedList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> M</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="607">
                           <a:s>LookBackInterval: </a:s>
                           <a:s r="606">
                              <a:s>Interval[</a:s>
                              <a:s r="604">
                                 <a:s r="602">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="603">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="605">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="612">
                        <a:s>where </a:s>
                        <a:s r="612">
                           <a:s r="610">
                              <a:s r="609">
                                 <a:s r="608">
                                    <a:s>M</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="609">
                                    <a:s>authoredOn</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="610">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> in </a:s>
                           <a:s r="611">
                              <a:s>LookBackInterval</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="613" locator="438:3-440:48" xsi:type="Query">
            <source localId="601" locator="438:3-438:11" alias="M">
               <expression localId="600" locator="438:3-438:9" name="MedList" xsi:type="OperandRef"/>
            </source>
            <let localId="607" locator="439:9-439:59" identifier="LookBackInterval">
               <expression localId="606" locator="439:27-439:59" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="604" locator="439:36-439:51" xsi:type="Subtract">
                     <operand localId="602" locator="439:36-439:40" xsi:type="Now"/>
                     <operand localId="603" locator="439:44-439:51" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="605" locator="439:54-439:58" xsi:type="Now"/>
               </expression>
            </let>
            <where localId="612" locator="440:5-440:48" xsi:type="In">
               <operand localId="610" locator="440:11-440:28" path="value" xsi:type="Property">
                  <source localId="609" locator="440:11-440:22" path="authoredOn" scope="M" xsi:type="Property"/>
               </operand>
               <operand localId="611" locator="440:33-440:48" name="LookBackInterval" xsi:type="QueryLetRef"/>
            </where>
         </expression>
         <operand name="MedList">
            <operandTypeSpecifier localId="598" locator="437:51-437:73" xsi:type="ListTypeSpecifier">
               <elementType localId="597" locator="437:56-437:72" name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="599" locator="437:85-437:99" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="629" locator="451:1-452:85" name="EncountersByConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="629">
               <a:s>// DSTU2 also checked the dateEnded property of MedicationOrder, but this doesn't exist for MedicationRequest

// -------------------------------------------------- ENCOUNTERS ------------------------------------------------------

/**
 * Filters Encounters by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List&lt;Encounter>} a list of Encounters matching the concept, or null if null was passed in
 */define function EncountersByConcept(Koncept </a:s>
               <a:s r="615">
                  <a:s>System.Concept</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="628">
                  <a:s r="628">
                     <a:s>
                        <a:s r="617">
                           <a:s r="616">
                              <a:s r="616">
                                 <a:s>[Encounter]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> E</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="627">
                        <a:s>where </a:s>
                        <a:s r="627">
                           <a:s>exists</a:s>
                           <a:s r="626">
                              <a:s>( </a:s>
                              <a:s r="626">
                                 <a:s>
                                    <a:s r="620">
                                       <a:s r="619">
                                          <a:s>(</a:s>
                                          <a:s r="619">
                                             <a:s r="618">
                                                <a:s>E</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="619">
                                                <a:s>type</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> ET</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="625">
                                    <a:s>where </a:s>
                                    <a:s r="625">
                                       <a:s r="623">
                                          <a:s r="621">
                                             <a:s>FHIRHelpers</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="623">
                                             <a:s>ToConcept(</a:s>
                                             <a:s r="622">
                                                <a:s>ET</a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> ~ </a:s>
                                       <a:s r="624">
                                          <a:s>Koncept</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s> )</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="628" locator="452:3-452:85" xsi:type="Query">
            <source localId="617" locator="452:3-452:15" alias="E">
               <expression localId="616" locator="452:3-452:13" dataType="fhir:Encounter" templateId="http://hl7.org/fhir/StructureDefinition/Encounter" xsi:type="Retrieve"/>
            </source>
            <where localId="627" locator="452:17-452:85" xsi:type="Exists">
               <operand localId="626" locator="452:29-452:85" xsi:type="Query">
                  <source localId="620" locator="452:31-452:41" alias="ET">
                     <expression localId="619" locator="452:31-452:38" path="type" scope="E" xsi:type="Property"/>
                  </source>
                  <where localId="625" locator="452:43-452:83" xsi:type="Equivalent">
                     <operand localId="623" locator="452:49-452:73" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="622" locator="452:71-452:72" name="ET" xsi:type="AliasRef"/>
                     </operand>
                     <operand localId="624" locator="452:77-452:83" name="Koncept" xsi:type="OperandRef"/>
                  </where>
               </operand>
            </where>
         </expression>
         <operand name="Koncept">
            <operandTypeSpecifier localId="615" locator="451:45-451:58" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="640" locator="460:1-462:40" name="InProgress" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="640">
               <a:s>/**
 * Encounters that are in progress. In FHIR R4, this is reflected by status: 'in-progress'.
 * @see http://hl7.org/fhir/R4/valueset-encounter-status.html
 * @param EncList - a list of Encounters
 * @returns {List&lt;Encounter>} a list of in progress encounters, or null if null was passed in
 */define function InProgress(EncList </a:s>
               <a:s r="631">
                  <a:s>List&lt;</a:s>
                  <a:s r="630">
                     <a:s>Encounter</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="639">
                  <a:s r="639">
                     <a:s>
                        <a:s r="633">
                           <a:s r="632">
                              <a:s>
                                 <a:s>EncList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> E</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="638">
                        <a:s>where </a:s>
                        <a:s r="638">
                           <a:s r="636">
                              <a:s r="635">
                                 <a:s r="634">
                                    <a:s>E</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="635">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="636">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="637">
                              <a:s>'in-progress'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="639" locator="461:3-462:40" xsi:type="Query">
            <source localId="633" locator="461:3-461:11" alias="E">
               <expression localId="632" locator="461:3-461:9" name="EncList" xsi:type="OperandRef"/>
            </source>
            <where localId="638" locator="462:5-462:40" xsi:type="Equal">
               <operand localId="636" locator="462:11-462:24" path="value" xsi:type="Property">
                  <source localId="635" locator="462:11-462:18" path="status" scope="E" xsi:type="Property"/>
               </operand>
               <operand localId="637" locator="462:28-462:40" valueType="t:String" value="in-progress" xsi:type="Literal"/>
            </where>
         </expression>
         <operand name="EncList">
            <operandTypeSpecifier localId="631" locator="460:36-460:50" xsi:type="ListTypeSpecifier">
               <elementType localId="630" locator="460:41-460:49" name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="651" locator="472:1-473:70" name="AllergyIntolerancesByConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="651">
               <a:s>// -------------------------------------------------- ALLERGY INTOLERANCES ------------------------------------------------------

/**
 * Filters AllergyIntolerances by a concept rather than by a ValueSet.  In CQL 1.3, this is built into the retrieve,
 * but for backwards compatibility, we keep this query where clause as an option.
 * @param Koncept - the concept to filter on (intentionally mispelled to avoid naming clashes)
 * @returns {List&lt;AllergyIntolerance>} a list of Allergy Intolerances matching the concept, or null if null was passed in
 */define function AllergyIntolerancesByConcept(Koncept </a:s>
               <a:s r="641">
                  <a:s>System.Concept</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="650">
                  <a:s r="650">
                     <a:s>
                        <a:s r="643">
                           <a:s r="642">
                              <a:s r="642">
                                 <a:s>[AllergyIntolerance]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> A</a:s>
                        </a:s>
                     </a:s>
                     <a:s> </a:s>
                     <a:s r="649">
                        <a:s>where </a:s>
                        <a:s r="649">
                           <a:s r="647">
                              <a:s r="644">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="647">
                                 <a:s>ToConcept(</a:s>
                                 <a:s r="646">
                                    <a:s r="645">
                                       <a:s>A</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="646">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="648">
                              <a:s>Koncept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="650" locator="473:3-473:70" xsi:type="Query">
            <source localId="643" locator="473:3-473:24" alias="A">
               <expression localId="642" locator="473:3-473:22" dataType="fhir:AllergyIntolerance" templateId="http://hl7.org/fhir/StructureDefinition/AllergyIntolerance" xsi:type="Retrieve"/>
            </source>
            <where localId="649" locator="473:26-473:70" xsi:type="Equivalent">
               <operand localId="647" locator="473:32-473:60" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="646" locator="473:54-473:59" path="code" scope="A" xsi:type="Property"/>
               </operand>
               <operand localId="648" locator="473:64-473:70" name="Koncept" xsi:type="OperandRef"/>
            </where>
         </expression>
         <operand name="Koncept">
            <operandTypeSpecifier localId="641" locator="472:54-472:67" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="666" locator="483:1-486:67" name="ActiveOrConfirmedAllergyIntolerance" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="666">
               <a:s>/**
* AllergyIntolerances that are active or confirmed.  In FHIR STU3, this is reflected by AllergyIntolerance
* with clinicalStatus 'active' or verificationStatus 'confirmed'
* @see https://www.hl7.org/fhir/R4/valueset-allergy-clinical-status.html
* @see https://www.hl7.org/fhir/R4/valueset-allergy-verification-status.html
* @param AllergyIntolList - a list of AllergyIntolerances
* @returns {List&lt;AllergyIntolerance>} a list of active or confirmed allergy intolerances, or null if null was passed in
*/define function ActiveOrConfirmedAllergyIntolerance(AllergyIntolList </a:s>
               <a:s r="653">
                  <a:s>List&lt;</a:s>
                  <a:s r="652">
                     <a:s>AllergyIntolerance</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="665">
                  <a:s r="665">
                     <a:s>
                        <a:s r="655">
                           <a:s r="654">
                              <a:s>
                                 <a:s>AllergyIntolList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> A</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="664">
                        <a:s>where </a:s>
                        <a:s r="664">
                           <a:s r="659">
                              <a:s r="657">
                                 <a:s r="656">
                                    <a:s>A</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="657">
                                    <a:s>clinicalStatus</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> ~ </a:s>
                              <a:s r="658">
                                 <a:s>&quot;AllergyIntolerance Active code&quot;</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="663">
                              <a:s r="661">
                                 <a:s r="660">
                                    <a:s>A</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="661">
                                    <a:s>verificationStatus</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> ~ </a:s>
                              <a:s r="662">
                                 <a:s>&quot;AllergyIntolerance Confirmed code&quot;</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="665" locator="484:3-486:67" xsi:type="Query">
            <source localId="655" locator="484:3-484:20" alias="A">
               <expression localId="654" locator="484:3-484:18" name="AllergyIntolList" xsi:type="OperandRef"/>
            </source>
            <where localId="664" locator="485:5-486:67" xsi:type="Or">
               <operand localId="659" locator="485:11-485:61" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="657" locator="485:11-485:26" path="clinicalStatus" scope="A" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="658" locator="485:30-485:61" name="AllergyIntolerance Active code" xsi:type="CodeRef"/>
                  </operand>
               </operand>
               <operand localId="663" locator="486:10-486:67" xsi:type="Equivalent">
                  <operand name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="661" locator="486:10-486:29" path="verificationStatus" scope="A" xsi:type="Property"/>
                  </operand>
                  <operand xsi:type="ToConcept">
                     <operand localId="662" locator="486:33-486:67" name="AllergyIntolerance Confirmed code" xsi:type="CodeRef"/>
                  </operand>
               </operand>
            </where>
         </expression>
         <operand name="AllergyIntolList">
            <operandTypeSpecifier localId="653" locator="483:70-483:93" xsi:type="ListTypeSpecifier">
               <elementType localId="652" locator="483:75-483:92" name="fhir:AllergyIntolerance" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="737" locator="498:1-508:79" name="GoalLookBack" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="737">
               <a:s>// -------------------------------------------------------- GOALS ------------------------------------------------------

/**
 * Goals with a start, target, or status date in the specified &quot;look back&quot; period.  For example, Pain Management Goals
 * in the last 2 years.
 * TODO: Rename to LookBack once the execution engine supports overloaded functions.
 * @param GoalList - a list of Goals
 * @returns {List&lt;Goal>} a list of Goals with a start, target, or status date in the specified lookback period, or null
 * if null was passed in
 */define function GoalLookBack(GoalList </a:s>
               <a:s r="668">
                  <a:s>List&lt;</a:s>
                  <a:s r="667">
                     <a:s>Goal</a:s>
                  </a:s>
                  <a:s>></a:s>
               </a:s>
               <a:s>, LookBack </a:s>
               <a:s r="669">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s>):
  </a:s>
               <a:s r="736">
                  <a:s r="736">
                     <a:s>
                        <a:s r="671">
                           <a:s r="670">
                              <a:s>
                                 <a:s>GoalList</a:s>
                              </a:s>
                           </a:s>
                           <a:s> G</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="677">
                           <a:s>LookBackInterval: </a:s>
                           <a:s r="676">
                              <a:s>Interval[</a:s>
                              <a:s r="674">
                                 <a:s r="672">
                                    <a:s>Now()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="673">
                                    <a:s>LookBack</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>, </a:s>
                              <a:s r="675">
                                 <a:s>Now()</a:s>
                              </a:s>
                              <a:s>]</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s r="683">
                           <a:s>StartDate: </a:s>
                           <a:s r="682">
                              <a:s r="681">
                                 <a:s>(</a:s>
                                 <a:s r="681">
                                    <a:s r="679">
                                       <a:s r="678">
                                          <a:s>G</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="679">
                                          <a:s>start</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> as </a:s>
                                    <a:s r="680">
                                       <a:s>FHIR.date</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="682">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s r="687">
                           <a:s>StatusDate: </a:s>
                           <a:s r="686">
                              <a:s r="685">
                                 <a:s r="684">
                                    <a:s>G</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="685">
                                    <a:s>statusDate</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="686">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s r="698">
                           <a:s>TargetDates: </a:s>
                           <a:s r="697">
                              <a:s>
                                 <a:s r="690">
                                    <a:s r="689">
                                       <a:s>(</a:s>
                                       <a:s r="689">
                                          <a:s r="688">
                                             <a:s>G</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="689">
                                             <a:s>target</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s> T</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> </a:s>
                              <a:s r="696">
                                 <a:s>return </a:s>
                                 <a:s r="695">
                                    <a:s r="694">
                                       <a:s>(</a:s>
                                       <a:s r="694">
                                          <a:s r="692">
                                             <a:s r="691">
                                                <a:s>T</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="692">
                                                <a:s>due</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="693">
                                             <a:s>FHIR.date</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="695">
                                       <a:s>value</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s r="710">
                           <a:s>TargetQuantities: </a:s>
                           <a:s r="709">
                              <a:s>
                                 <a:s r="701">
                                    <a:s r="700">
                                       <a:s>(</a:s>
                                       <a:s r="700">
                                          <a:s r="699">
                                             <a:s>G</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="700">
                                             <a:s>target</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s> T</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> </a:s>
                              <a:s r="708">
                                 <a:s>return </a:s>
                                 <a:s r="707">
                                    <a:s r="702">
                                       <a:s>FHIRHelpers</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="707">
                                       <a:s>ToQuantity(</a:s>
                                       <a:s r="706">
                                          <a:s r="704">
                                             <a:s r="703">
                                                <a:s>T</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="704">
                                                <a:s>due</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="705">
                                             <a:s>FHIR.Duration</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="735">
                        <a:s>where </a:s>
                        <a:s r="735">
                           <a:s r="725">
                              <a:s r="717">
                                 <a:s r="713">
                                    <a:s r="711">
                                       <a:s>StartDate</a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="712">
                                       <a:s>LookBackInterval</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>
      or </a:s>
                                 <a:s r="716">
                                    <a:s r="714">
                                       <a:s>StatusDate</a:s>
                                    </a:s>
                                    <a:s> in </a:s>
                                    <a:s r="715">
                                       <a:s>LookBackInterval</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
      or </a:s>
                              <a:s r="724">
                                 <a:s>exists</a:s>
                                 <a:s r="723">
                                    <a:s>(</a:s>
                                    <a:s r="723">
                                       <a:s>
                                          <a:s r="719">
                                             <a:s r="718">
                                                <a:s>
                                                   <a:s>TargetDates</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s> TD</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> </a:s>
                                       <a:s r="722">
                                          <a:s>where </a:s>
                                          <a:s r="722">
                                             <a:s r="720">
                                                <a:s>TD</a:s>
                                             </a:s>
                                             <a:s> in </a:s>
                                             <a:s r="721">
                                                <a:s>LookBackInterval</a:s>
                                             </a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      or </a:s>
                           <a:s r="734">
                              <a:s>exists</a:s>
                              <a:s r="733">
                                 <a:s>(</a:s>
                                 <a:s r="733">
                                    <a:s>
                                       <a:s r="727">
                                          <a:s r="726">
                                             <a:s>
                                                <a:s>TargetQuantities</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> TQ</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> </a:s>
                                    <a:s r="732">
                                       <a:s>where </a:s>
                                       <a:s r="732">
                                          <a:s r="730">
                                             <a:s>(</a:s>
                                             <a:s r="730">
                                                <a:s r="728">
                                                   <a:s>StartDate</a:s>
                                                </a:s>
                                                <a:s> + </a:s>
                                                <a:s r="729">
                                                   <a:s>TQ</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                          <a:s> in </a:s>
                                          <a:s r="731">
                                             <a:s>LookBackInterval</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="736" locator="499:3-508:79" xsi:type="Query">
            <source localId="671" locator="499:3-499:12" alias="G">
               <expression localId="670" locator="499:3-499:10" name="GoalList" xsi:type="OperandRef"/>
            </source>
            <let localId="677" locator="500:9-500:59" identifier="LookBackInterval">
               <expression localId="676" locator="500:27-500:59" lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low localId="674" locator="500:36-500:51" xsi:type="Subtract">
                     <operand localId="672" locator="500:36-500:40" xsi:type="Now"/>
                     <operand localId="673" locator="500:44-500:51" name="LookBack" xsi:type="OperandRef"/>
                  </low>
                  <high localId="675" locator="500:54-500:58" xsi:type="Now"/>
               </expression>
            </let>
            <let localId="683" locator="501:5-501:43" identifier="StartDate">
               <expression localId="682" locator="501:16-501:43" path="value" xsi:type="Property">
                  <source localId="681" locator="501:16-501:37" strict="false" xsi:type="As">
                     <operand localId="679" locator="501:17-501:23" path="start" scope="G" xsi:type="Property"/>
                     <asTypeSpecifier localId="680" locator="501:28-501:36" name="fhir:date" xsi:type="NamedTypeSpecifier"/>
                  </source>
               </expression>
            </let>
            <let localId="687" locator="502:5-502:34" identifier="StatusDate">
               <expression localId="686" locator="502:17-502:34" path="value" xsi:type="Property">
                  <source localId="685" locator="502:17-502:28" path="statusDate" scope="G" xsi:type="Property"/>
               </expression>
            </let>
            <let localId="698" locator="503:5-503:63" identifier="TargetDates">
               <expression localId="697" locator="503:18-503:63" xsi:type="Query">
                  <source localId="690" locator="503:18-503:29" alias="T">
                     <expression localId="689" locator="503:18-503:27" path="target" scope="G" xsi:type="Property"/>
                  </source>
                  <return localId="696" locator="503:31-503:63">
                     <expression localId="695" locator="503:38-503:63" path="value" xsi:type="Property">
                        <source localId="694" locator="503:38-503:57" strict="false" xsi:type="As">
                           <operand localId="692" locator="503:39-503:43" path="due" scope="T" xsi:type="Property"/>
                           <asTypeSpecifier localId="693" locator="503:48-503:56" name="fhir:date" xsi:type="NamedTypeSpecifier"/>
                        </source>
                     </expression>
                  </return>
               </expression>
            </let>
            <let localId="710" locator="504:5-504:88" identifier="TargetQuantities">
               <expression localId="709" locator="504:23-504:88" xsi:type="Query">
                  <source localId="701" locator="504:23-504:34" alias="T">
                     <expression localId="700" locator="504:23-504:32" path="target" scope="G" xsi:type="Property"/>
                  </source>
                  <return localId="708" locator="504:36-504:88">
                     <expression localId="707" locator="504:43-504:88" name="ToQuantity" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="706" locator="504:66-504:87" strict="false" xsi:type="As">
                           <operand localId="704" locator="504:66-504:70" path="due" scope="T" xsi:type="Property"/>
                           <asTypeSpecifier localId="705" locator="504:75-504:87" name="fhir:Duration" xsi:type="NamedTypeSpecifier"/>
                        </operand>
                     </expression>
                  </return>
               </expression>
            </let>
            <where localId="735" locator="505:5-508:79" xsi:type="Or">
               <operand localId="725" locator="505:11-507:60" xsi:type="Or">
                  <operand localId="717" locator="505:11-506:39" xsi:type="Or">
                     <operand localId="713" locator="505:11-505:39" xsi:type="In">
                        <operand xsi:type="ToDateTime">
                           <operand localId="711" locator="505:11-505:19" name="StartDate" xsi:type="QueryLetRef"/>
                        </operand>
                        <operand localId="712" locator="505:24-505:39" name="LookBackInterval" xsi:type="QueryLetRef"/>
                     </operand>
                     <operand localId="716" locator="506:10-506:39" xsi:type="In">
                        <operand xsi:type="ToDateTime">
                           <operand localId="714" locator="506:10-506:19" name="StatusDate" xsi:type="QueryLetRef"/>
                        </operand>
                        <operand localId="715" locator="506:24-506:39" name="LookBackInterval" xsi:type="QueryLetRef"/>
                     </operand>
                  </operand>
                  <operand localId="724" locator="507:10-507:60" xsi:type="Exists">
                     <operand localId="723" locator="507:16-507:60" xsi:type="Query">
                        <source localId="719" locator="507:17-507:30" alias="TD">
                           <expression localId="718" locator="507:17-507:27" name="TargetDates" xsi:type="QueryLetRef"/>
                        </source>
                        <where localId="722" locator="507:32-507:59" xsi:type="In">
                           <operand xsi:type="ToDateTime">
                              <operand localId="720" locator="507:38-507:39" name="TD" xsi:type="AliasRef"/>
                           </operand>
                           <operand localId="721" locator="507:44-507:59" name="LookBackInterval" xsi:type="QueryLetRef"/>
                        </where>
                     </operand>
                  </operand>
               </operand>
               <operand localId="734" locator="508:10-508:79" xsi:type="Exists">
                  <operand localId="733" locator="508:16-508:79" xsi:type="Query">
                     <source localId="727" locator="508:17-508:35" alias="TQ">
                        <expression localId="726" locator="508:17-508:32" name="TargetQuantities" xsi:type="QueryLetRef"/>
                     </source>
                     <where localId="732" locator="508:37-508:78" xsi:type="In">
                        <operand xsi:type="ToDateTime">
                           <operand localId="730" locator="508:43-508:58" xsi:type="Add">
                              <operand localId="728" locator="508:44-508:52" name="StartDate" xsi:type="QueryLetRef"/>
                              <operand localId="729" locator="508:56-508:57" name="TQ" xsi:type="AliasRef"/>
                           </operand>
                        </operand>
                        <operand localId="731" locator="508:63-508:78" name="LookBackInterval" xsi:type="QueryLetRef"/>
                     </where>
                  </operand>
               </operand>
            </where>
         </expression>
         <operand name="GoalList">
            <operandTypeSpecifier localId="668" locator="498:39-498:48" xsi:type="ListTypeSpecifier">
               <elementType localId="667" locator="498:44-498:47" name="fhir:Goal" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand name="LookBack">
            <operandTypeSpecifier localId="669" locator="498:60-498:74" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
   </statements>
</library>
